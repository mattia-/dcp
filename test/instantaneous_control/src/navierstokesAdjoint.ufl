#/* 
# *  Copyright (C) 2017, Ivan Fumagalli, ivan.fumagalli@polimi.it
# * 
# *  This file is part of the DCP library
# *   
# *   The DCP library is free software: you can redistribute it and/or modify
# *   it under the terms of the GNU General Public License as published by
# *   the Free Software Foundation, either version 3 of the License, or
# *   (at your option) any later version.
# *
# *   The DCP library is distributed in the hope that it will be useful,
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *   GNU General Public License for more details.
# *
# *   You should have received a copy of the GNU General Public License
# *   along with the DCP library.  If not, see <http://www.gnu.org/licenses/>. 
# */ 

# UFL file for time dependent, moving domain (ALE) Navier-Stokes simulation
# Terms to be integrated on the previous-than-current domain
# lambdastar is the weight: lambdastar*int_curr+(1-lambdastar)*int_prev
#
# define mesh dimension
cell = triangle

# define function spaces
V = VectorElement ("Lagrange", cell, 1)
Q = FiniteElement ("Lagrange", cell, 1)
T = V * Q
W = VectorElement ("Lagrange", cell, 1)
Wscal = FiniteElement ("Lagrange", cell, 1)

# define test and trial functions
trial = TrialFunction (T)
test = TestFunction (T)

z, q = split (trial)
v, p = split (test)

x = SpatialCoordinate (cell)

# define coefficients
nu = Constant (cell)
gamma = Constant (cell)
dt = Constant (cell)
lambdastar = Constant (cell)
noStokes = Constant (cell)
stabBulk = Constant (cell)
stabSigma = Constant (cell)
stabSGCL = Constant (cell)
n = FacetNormal(cell)
h = MinFacetEdgeLength(cell)
h_dx = Circumradius(cell)
u = Coefficient (V)
u_old = Coefficient (V)
uDir = Coefficient (V)
# w = Coefficient (Wscal)
w = Coefficient (W)
beta = Constant (cell)
stressAbove = Coefficient (V)
dummy, normalStressAbove = split (stressAbove)
stressBelow = Coefficient (V)
zeroVector = VectorConstant (cell)
wallVelocity = Coefficient (V)

stabPress = Constant (cell)

rescale = Constant (cell)

#wr,wth = split (w)
#ur,uth = split (u)
#vr,vth = split (v)
#ur_old,uth_old = split (u_old)

#th = pi/2
#A = as_matrix([[cos(th) , -sin(th)] , [sin(th) , cos(th)]])
#A = as_matrix ([ [0 , -1] , [1 , 0] ])

# define bilinear form
a = inner (v, z) * x[0] * dx \
    + dt * 2.0 * nu * inner (sym (grad (v)), sym (grad (z))) * x[0] * dx \
    + noStokes * dt * inner (grad (v) * (u_old+uDir), z) * x[0] * dx \
    - inner (grad (v) * w, z) * x[0] * dx \
    - (Dx(x[0]*w[0],0) + x[0]*Dx(w[1],1)) * inner (v, z) * dx \
    - dt * inner (p, Dx(x[0]*z[0],0) + x[0]*Dx(z[1],1)) * dx \
    + dt * inner (Dx(x[0]*v[0],0) + x[0]*Dx(v[1],1), q) * dx \
    + dt * beta/h * inner (v, z) * x[0] * ds(3) \
    + stabBulk * dt * 0.5 * (Dx(x[0]*u_old[0],0) + x[0]*Dx(u_old[1],1)) * inner (v, z) * dx \
    + stabBulk * dt * 0.5 * (Dx(x[0]*uDir[0],0) + x[0]*Dx(uDir[1],1)) * inner (v, z) * dx \
    - stabSigma * 0.5 * dot (dt*u_old+dt*uDir-w, n) * inner (v, z) * x[0] * ds(1) \
    + dt * stabPress * h_dx*h_dx * inner (grad (p), grad (q)) * dx \
    + stabSGCL * 0.5*dt*dt * gamma * (n[0]*Dx(v[0]*n[0]/n[1]+v[1],1) - n[1]*Dx(v[0]*n[0]/n[1]+v[1],0) ) * ( n[0]*Dx(z[0]*n[0]/n[1]+z[1],1) - n[1]*Dx(z[0]*n[0]/n[1]+z[1],0) ) * x[0] * ds(1)
    #+ dt * stabPress * inner (grad (p), grad (q)) * dx
#-outer NON SI PUO'    + gamma * dt * tr ((Identity-outer(n,n)) * grad(z))  * ds(1)

#    - inner (grad (v) * (w*as_vector([0, 1])), z) * x[0] * dx \
#    - x[0]*Dx(w,1) * inner (v, z) * dx \
#
#    - stabSigma * 0.5 * dot (dt*u_old+dt*uDir-(w*as_vector([0, 1])), n) * inner (v, z) * x[0] * ds(1) \

# define linear form
L = dt * inner (u, v) * x[0] * dx 
