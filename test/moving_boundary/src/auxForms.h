// This code conforms with the UFC specification version 1.5.0
// and was automatically generated by FFC version 1.5.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __AUXFORMS_H
#define __AUXFORMS_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class auxforms_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  auxforms_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[4][2];
    for (unsigned int row = 0; row < 4; row++)
    {
      for (unsigned int col = 0; col < 2; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[4][4];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new auxforms_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class auxforms_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  auxforms_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[4][2];
    for (unsigned int row = 0; row < 4; row++)
    {
      for (unsigned int col = 0; col < 2; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[4][4];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582063, 0.0544331053951817};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582064, 0.0544331053951818};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0},
      {3.99999999999999, 0.0, 7.07106781186547, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025257, -0.91287092917528, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[4];
      for (unsigned int r = 0; r < 4; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_finite_element_0();
        break;
      }
    case 1:
      {
        return new auxforms_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new auxforms_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class auxforms_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  auxforms_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 6, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 28;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, -0.0173205080756888, -0.01, 0.0121716123890036, 0.0094280904158206, 0.00544331053951816, -0.0212594169703065, -0.0179674867055021, -0.0139175553567226, -0.00803530433166532, 0.017248787237282, 0.0152120004824378, 0.0128564869306645, 0.00995859195463939, 0.00574959574576069, -0.0120515300277022, -0.0109010190686153, -0.00961379516424303, -0.00812513988714842, -0.00629370629370629, -0.00363367302287175, 0.0103967436622596, 0.0095636131994221, 0.00865061362433823, 0.00762912411270201, 0.00644778670370204, 0.00499443410466712, 0.0028835378747794};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0173205080756888, -0.00999999999999999, 0.0121716123890037, -0.00942809041582066, 0.00544331053951821, 0.0212594169703065, -0.0179674867055022, 0.0139175553567226, -0.00803530433166534, 0.0172487872372821, -0.0152120004824377, 0.0128564869306645, -0.00995859195463939, 0.0057495957457607, 0.0120515300277022, -0.0109010190686153, 0.00961379516424302, -0.00812513988714843, 0.00629370629370631, -0.00363367302287175, 0.0103967436622596, -0.0095636131994221, 0.00865061362433821, -0.007629124112702, 0.00644778670370201, -0.00499443410466712, 0.00288353787477938};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0, 0.0199999999999999, 0.0, 0.0, 0.0163299316185545, 0.0, 0.0, 0.0, 0.0321412173266613, 0.0, 0.0, 0.0, 0.0, 0.0287479787288034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218020381372306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0692820323027549, -0.0171428571428571, 0.0978075995544939, -0.0697005255741027, 0.0384919816723071, 0.0714316410202297, -0.0209449559309854, -0.00413550216314041, 0.00826488445542721, 0.0443540243244396, -0.00651942877818761, -0.0151522881682831, 0.0224068318979386, -0.0160167310060477, 0.0206597657617751, 0.00622915375349444, -0.0230731083941832, 0.0306433847172455, -0.0294905094905095, 0.0186874612604834, 0.0, 0.0191272263988442, -0.0317189166225735, 0.0381456205635101, -0.0386867202222121, 0.0332962273644474, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, -0.0123717914826348, -0.0214285714285715, -0.0312984318574381, 0.121218305346265, -0.113726309486362, -0.0131200973302462, 0.077824885272975, -0.047558274876115, 0.0156114484158068, 0.0, 0.0586748590036884, -0.0449977042573258, 0.017071871922239, -0.00205342705205747, 0.0, 0.0342603456442196, -0.00988847502607852, -0.026464741346712, 0.0465734265734266, -0.0358176340825931, 0.0, 0.0, 0.0317189166225735, -0.0686621170143181, 0.0928481285333091, -0.0932294366204528, 0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0824786098842323, 0.0476190476190476, 0.0625968637148761, -0.0538748023761178, 0.116642368703961, 0.0194371812299945, 0.00821370820822966, 0.0127246220404323, 0.0110198459405697, 0.0, 0.0173851434085002, 0.051425947722658, -0.0739781116630354, 0.0492822492493774, 0.0, 0.0, 0.0494423751303927, -0.0325005595485938, -0.0125874125874126, 0.0259548073062268, 0.0, 0.0, 0.0, 0.045774744676212, -0.108322816622194, 0.139844154930679, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048494, -0.0247435829652696, 0.0, -0.0117369119465392, 0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, 0.0389691549988232, -0.0766797613364634, 0.0, 0.0, 0.0417835825246596, 0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, -0.0440559440559441, 0.00778644219186812, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, -0.116536795775566, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, 0.0197948663722157, 0.0685714285714286, 0.0, 0.00606091526731318, 0.125973758200278, 0.0, 0.0, 0.0508984881617284, 0.0550992297028479, 0.0, 0.0, 0.0, 0.0533495997569967, 0.0123205623123444, 0.0, 0.0, 0.0, 0.0, 0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0466147183102264, -0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, -0.069282032302755, -0.017142857142857, 0.0978075995544939, 0.0697005255741026, 0.038491981672307, -0.0714316410202298, -0.0209449559309853, 0.00413550216314051, 0.00826488445542718, 0.0443540243244396, 0.00651942877818762, -0.0151522881682831, -0.0224068318979386, -0.0160167310060477, -0.0206597657617751, 0.00622915375349444, 0.0230731083941832, 0.0306433847172454, 0.0294905094905094, 0.0186874612604833, 0.0, -0.0191272263988442, -0.0317189166225735, -0.0381456205635101, -0.0386867202222121, -0.0332962273644474, -0.0201847651234557};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, 0.0123717914826349, -0.0214285714285715, -0.0312984318574381, -0.121218305346265, -0.113726309486362, 0.0131200973302463, 0.077824885272975, 0.0475582748761149, 0.0156114484158068, 0.0, -0.0586748590036884, -0.0449977042573257, -0.017071871922239, -0.00205342705205735, 0.0, 0.0342603456442195, 0.00988847502607855, -0.026464741346712, -0.0465734265734264, -0.0358176340825931, 0.0, 0.0, 0.0317189166225734, 0.0686621170143181, 0.0928481285333091, 0.0932294366204528, 0.0605542953703674};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, -0.0824786098842321, 0.0476190476190477, 0.062596863714876, 0.053874802376118, 0.116642368703961, -0.0194371812299945, 0.00821370820822956, -0.012724622040432, 0.0110198459405696, 0.0, -0.0173851434085003, 0.051425947722658, 0.0739781116630354, 0.0492822492493773, 0.0, 0.0, -0.0494423751303927, -0.0325005595485938, 0.0125874125874124, 0.0259548073062269, 0.0, 0.0, 0.0, -0.0457747446762121, -0.108322816622194, -0.139844154930679, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048493, 0.0247435829652696, 0.0, -0.0117369119465392, -0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, -0.0389691549988233, -0.0766797613364633, 0.0, 0.0, 0.0417835825246596, -0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, 0.0440559440559442, 0.00778644219186817, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, 0.116536795775566, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731329, -0.0197948663722158, 0.0685714285714287, 0.0, -0.00606091526731326, 0.125973758200278, 0.0, 0.0, -0.0508984881617285, 0.0550992297028479, 0.0, 0.0, 0.0, -0.0533495997569968, 0.0123205623123443, 0.0, 0.0, 0.0, 0.0, -0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0466147183102264, -0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731325, -0.0494871659305393, -0.0514285714285714, 0.0899829915901345, 0.0757614408414158, 0.0454905237945448, -0.00145778859224956, -0.0406578556307363, -0.0518528348147608, -0.0358144993068511, -0.0295693495496264, 0.00651942877818764, 0.0261721341088527, 0.0309427678590581, 0.0209449559309854, 0.0482061201108086, 0.0186874612604834, -0.00109871944734209, -0.0120716364037634, -0.0151048951048951, -0.0103819229224908, -0.0623804619735576, -0.0382544527976884, -0.0201847651234558, -0.00762912411270201, 0.0, 0.00332962273644472, 0.00288353787477937};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048498, -0.0123717914826352, 0.0214285714285713, -0.16822907123373, -0.0151522881682831, 0.00874817765279702, 0.0666938280954185, 0.0627321964403531, 0.00469220437740938, -0.0181368297771875, -0.036961686937033, -0.0586748590036885, -0.0243354931187578, 0.00960292795625939, 0.0164274164164592, -0.0602576501385106, 0.0233593265756043, 0.0310388243874132, 0.0109109021341708, -0.00755244755244756, -0.0103819229224908, 0.155951154933894, 0.0478180659971106, 0.00288353787477946, -0.007629124112702, -0.00386867202222118, 0.0016648113682224, 0.00288353787477942};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0, -0.0952380952380952, 0.132148934509183, 0.0, 0.0544331053951817, 0.0, -0.0082137082082295, 0.0, -0.0257129738613289, 0.0985644984987547, 0.0, -0.0293862558415189, 0.0, 0.0164274164164591, 0.0, -0.0622915375349447, 0.0, 0.0185717483134821, 0.0, -0.0103819229224909, -0.207934873245192, 0.0, 0.0173012272486764, 0.0, -0.00515822936296168, 0.0, 0.00288353787477947};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048497, 0.0123717914826345, 0.0214285714285714, -0.16822907123373, 0.0151522881682832, 0.00874817765279707, -0.0666938280954186, 0.0627321964403532, -0.00469220437740941, -0.0181368297771875, -0.0369616869370329, 0.0586748590036884, -0.0243354931187578, -0.00960292795625944, 0.0164274164164591, 0.060257650138511, 0.0233593265756043, -0.0310388243874132, 0.0109109021341708, 0.00755244755244758, -0.0103819229224907, 0.155951154933894, -0.0478180659971104, 0.00288353787477942, 0.00762912411270202, -0.00386867202222119, -0.00166481136822235, 0.00288353787477938};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0494871659305394, -0.0514285714285715, 0.0899829915901345, -0.0757614408414158, 0.0454905237945448, 0.0014577885922496, -0.0406578556307363, 0.0518528348147609, -0.0358144993068511, -0.0295693495496264, -0.00651942877818761, 0.0261721341088527, -0.0309427678590581, 0.0209449559309854, -0.0482061201108087, 0.0186874612604834, 0.00109871944734202, -0.0120716364037634, 0.0151048951048951, -0.0103819229224908, -0.0623804619735576, 0.0382544527976884, -0.0201847651234558, 0.00762912411270203, 0.0, -0.00332962273644472, 0.00288353787477937};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.296922995583236, -0.171428571428571, 0.082158383625775, 0.0454568645048493, 0.0524890659167824, 0.042275869175238, -0.0373723723474444, 0.0276760529379396, 0.0486709862375157, -0.133062072973319, -0.0325971438909379, -0.0573950309404665, -0.0906943195868943, -0.0710485760011856, 0.103298828808876, -0.0186874612604834, -0.0065923166840523, 0.0445721959523571, 0.0766033966033966, 0.0591769606581974, 0.0, 0.0956361319942208, 0.0951567498677203, 0.0534038687889141, 0.00773734404444239, -0.0199777364186684, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.179965983180269, 0.0909137290096991, 0.0349927106111884, 0.230330597575435, 0.0583173282784298, -0.0782564255486574, -0.00183664099009501, 0.088708048648879, 0.065194287781876, 0.0725473191087495, -0.0106699199513993, -0.0484608784285544, -0.206597657617751, 0.0124583075069889, -0.0955885919187591, -0.0752155806696025, 0.0255344655344656, 0.0591769606581975, 0.0, -0.191272263988442, -0.0634378332451467, 0.0305164964508081, 0.0309493761777698, -0.00665924547288949, -0.0201847651234559};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142855, -0.179965983180269, -0.090913729009699, 0.0349927106111882, -0.230330597575435, 0.05831732827843, 0.0782564255486575, -0.001836640990095, 0.0887080486488794, -0.0651942877818761, 0.0725473191087498, 0.0106699199513992, -0.0484608784285543, 0.206597657617751, 0.012458307506989, 0.0955885919187591, -0.0752155806696026, -0.0255344655344655, 0.0591769606581973, 0.0, 0.191272263988442, -0.063437833245147, -0.030516496450808, 0.0309493761777698, 0.00665924547288946, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.296922995583236, -0.171428571428572, 0.0821583836257749, -0.0454568645048495, 0.0524890659167824, -0.0422758691752379, -0.0373723723474445, -0.0276760529379397, 0.0486709862375156, -0.133062072973319, 0.0325971438909381, -0.0573950309404665, 0.0906943195868944, -0.0710485760011858, -0.103298828808876, -0.0186874612604834, 0.00659231668405231, 0.0445721959523571, -0.0766033966033967, 0.0591769606581975, 0.0, -0.0956361319942211, 0.0951567498677204, -0.0534038687889141, 0.00773734404444248, 0.0199777364186685, -0.0201847651234558};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505167, -0.0909137290096988, -0.174963553055941, -0.0262401946604925, 0.0977431276779316, 0.211864956973195, 0.0863221265344617, 0.0, 0.117349718007377, 0.0449977042573257, 0.0448136637958771, 0.0451753951452625, 0.0, -0.137041382576878, -0.0197769500521572, -0.0501437204464018, -0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, -0.137324234028636, -0.0464240642666546, 0.0466147183102264, 0.0605542953703675};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0909137290096985, 0.0, 0.0, -0.046947647786157, 0.0, -0.0524890659167825, 0.0, -0.351136025901814, 0.0, 0.157032804653116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.205562073865317, 0.0, 0.153216923586227, 0.0, -0.137041382576878, 0.0, 0.0, 0.19031349973544, 0.0, -0.0928481285333092, 0.0, 0.0605542953703673};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505166, 0.0909137290096993, -0.174963553055941, 0.0262401946604926, 0.0977431276779317, -0.211864956973194, 0.0863221265344616, 0.0, -0.117349718007377, 0.0449977042573258, -0.0448136637958771, 0.0451753951452626, 0.0, -0.137041382576878, 0.019776950052157, -0.0501437204464017, 0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, 0.137324234028636, -0.0464240642666546, -0.0466147183102265, 0.0605542953703676};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142859, -0.062596863714876, -0.181827458019398, -0.0699854212223768, 0.0583115436899834, -0.00821370820822939, -0.190869330606481, -0.150604561187784, 0.0, 0.0521554302255009, -0.0514259477226579, 0.0554835837472766, 0.106778206706984, 0.0, 0.0, 0.148327125391178, 0.0325005595485939, 0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, 0.137324234028636, 0.108322816622194, -0.0466147183102263, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.0625968637148761, 0.181827458019398, -0.0699854212223763, -0.0583115436899836, -0.0082137082082297, 0.190869330606481, -0.150604561187784, 0.0, -0.0521554302255009, -0.0514259477226581, -0.0554835837472766, 0.106778206706984, 0.0, 0.0, -0.148327125391178, 0.0325005595485937, -0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, -0.137324234028636, 0.108322816622194, 0.0466147183102265, -0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.342857142857143, 0.0234738238930786, 0.0, 0.104978131833565, 0.0, -0.073102003053243, 0.0, -0.0312228968316139, 0.0, 0.0, -0.0835671650493192, 0.0, -0.168381018268706, 0.0, 0.0, 0.0, -0.117002014374937, 0.0, -0.0934373063024168, 0.0, 0.0, 0.0, 0.0, -0.108322816622194, 0.0, 0.100923825617279};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 28; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 28; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 6)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[64][6];
    for (unsigned int row = 0; row < 64; row++)
    {
      for (unsigned int col = 0; col < 6; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[64][64];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, -0.0173205080756888, -0.01, 0.0121716123890036, 0.0094280904158206, 0.00544331053951816, -0.0212594169703065, -0.0179674867055021, -0.0139175553567226, -0.00803530433166532, 0.017248787237282, 0.0152120004824378, 0.0128564869306645, 0.00995859195463939, 0.00574959574576069, -0.0120515300277022, -0.0109010190686153, -0.00961379516424303, -0.00812513988714842, -0.00629370629370629, -0.00363367302287175, 0.0103967436622596, 0.0095636131994221, 0.00865061362433823, 0.00762912411270201, 0.00644778670370204, 0.00499443410466712, 0.0028835378747794};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0173205080756888, -0.00999999999999999, 0.0121716123890037, -0.00942809041582066, 0.00544331053951821, 0.0212594169703065, -0.0179674867055022, 0.0139175553567226, -0.00803530433166534, 0.0172487872372821, -0.0152120004824377, 0.0128564869306645, -0.00995859195463939, 0.0057495957457607, 0.0120515300277022, -0.0109010190686153, 0.00961379516424302, -0.00812513988714843, 0.00629370629370631, -0.00363367302287175, 0.0103967436622596, -0.0095636131994221, 0.00865061362433821, -0.007629124112702, 0.00644778670370201, -0.00499443410466712, 0.00288353787477938};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0, 0.0, 0.0199999999999999, 0.0, 0.0, 0.0163299316185545, 0.0, 0.0, 0.0, 0.0321412173266613, 0.0, 0.0, 0.0, 0.0, 0.0287479787288034, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0218020381372306, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0692820323027549, -0.0171428571428571, 0.0978075995544939, -0.0697005255741027, 0.0384919816723071, 0.0714316410202297, -0.0209449559309854, -0.00413550216314041, 0.00826488445542721, 0.0443540243244396, -0.00651942877818761, -0.0151522881682831, 0.0224068318979386, -0.0160167310060477, 0.0206597657617751, 0.00622915375349444, -0.0230731083941832, 0.0306433847172455, -0.0294905094905095, 0.0186874612604834, 0.0, 0.0191272263988442, -0.0317189166225735, 0.0381456205635101, -0.0386867202222121, 0.0332962273644474, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, -0.0123717914826348, -0.0214285714285715, -0.0312984318574381, 0.121218305346265, -0.113726309486362, -0.0131200973302462, 0.077824885272975, -0.047558274876115, 0.0156114484158068, 0.0, 0.0586748590036884, -0.0449977042573258, 0.017071871922239, -0.00205342705205747, 0.0, 0.0342603456442196, -0.00988847502607852, -0.026464741346712, 0.0465734265734266, -0.0358176340825931, 0.0, 0.0, 0.0317189166225735, -0.0686621170143181, 0.0928481285333091, -0.0932294366204528, 0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0824786098842323, 0.0476190476190476, 0.0625968637148761, -0.0538748023761178, 0.116642368703961, 0.0194371812299945, 0.00821370820822966, 0.0127246220404323, 0.0110198459405697, 0.0, 0.0173851434085002, 0.051425947722658, -0.0739781116630354, 0.0492822492493774, 0.0, 0.0, 0.0494423751303927, -0.0325005595485938, -0.0125874125874126, 0.0259548073062268, 0.0, 0.0, 0.0, 0.045774744676212, -0.108322816622194, 0.139844154930679, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048494, -0.0247435829652696, 0.0, -0.0117369119465392, 0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, 0.0389691549988232, -0.0766797613364634, 0.0, 0.0, 0.0417835825246596, 0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, -0.0440559440559441, 0.00778644219186812, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, -0.116536795775566, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, 0.0197948663722157, 0.0685714285714286, 0.0, 0.00606091526731318, 0.125973758200278, 0.0, 0.0, 0.0508984881617284, 0.0550992297028479, 0.0, 0.0, 0.0, 0.0533495997569967, 0.0123205623123444, 0.0, 0.0, 0.0, 0.0, 0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0466147183102264, -0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731327, -0.069282032302755, -0.017142857142857, 0.0978075995544939, 0.0697005255741026, 0.038491981672307, -0.0714316410202298, -0.0209449559309853, 0.00413550216314051, 0.00826488445542718, 0.0443540243244396, 0.00651942877818762, -0.0151522881682831, -0.0224068318979386, -0.0160167310060477, -0.0206597657617751, 0.00622915375349444, 0.0230731083941832, 0.0306433847172454, 0.0294905094905094, 0.0186874612604833, 0.0, -0.0191272263988442, -0.0317189166225735, -0.0381456205635101, -0.0386867202222121, -0.0332962273644474, -0.0201847651234557};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048496, 0.0123717914826349, -0.0214285714285715, -0.0312984318574381, -0.121218305346265, -0.113726309486362, 0.0131200973302463, 0.077824885272975, 0.0475582748761149, 0.0156114484158068, 0.0, -0.0586748590036884, -0.0449977042573257, -0.017071871922239, -0.00205342705205735, 0.0, 0.0342603456442195, 0.00988847502607855, -0.026464741346712, -0.0465734265734264, -0.0358176340825931, 0.0, 0.0, 0.0317189166225734, 0.0686621170143181, 0.0928481285333091, 0.0932294366204528, 0.0605542953703674};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, -0.0824786098842321, 0.0476190476190477, 0.062596863714876, 0.053874802376118, 0.116642368703961, -0.0194371812299945, 0.00821370820822956, -0.012724622040432, 0.0110198459405696, 0.0, -0.0173851434085003, 0.051425947722658, 0.0739781116630354, 0.0492822492493773, 0.0, 0.0, -0.0494423751303927, -0.0325005595485938, 0.0125874125874124, 0.0259548073062269, 0.0, 0.0, 0.0, -0.0457747446762121, -0.108322816622194, -0.139844154930679, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048493, 0.0247435829652696, 0.0, -0.0117369119465392, -0.106066017177982, -0.131222664791956, 0.0, 0.0365510015266215, -0.0389691549988233, -0.0766797613364633, 0.0, 0.0, 0.0417835825246596, -0.0266747998784983, -0.0574959574576069, 0.0, 0.0, 0.0, 0.0585010071874687, 0.0440559440559442, 0.00778644219186817, 0.0, 0.0, 0.0, 0.0, 0.054161408311097, 0.116536795775566, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731329, -0.0197948663722158, 0.0685714285714287, 0.0, -0.00606091526731326, 0.125973758200278, 0.0, 0.0, -0.0508984881617285, 0.0550992297028479, 0.0, 0.0, 0.0, -0.0533495997569968, 0.0123205623123443, 0.0, 0.0, 0.0, 0.0, -0.0503496503496504, -0.0249166150139779, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0466147183102264, -0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731325, -0.0494871659305393, -0.0514285714285714, 0.0899829915901345, 0.0757614408414158, 0.0454905237945448, -0.00145778859224956, -0.0406578556307363, -0.0518528348147608, -0.0358144993068511, -0.0295693495496264, 0.00651942877818764, 0.0261721341088527, 0.0309427678590581, 0.0209449559309854, 0.0482061201108086, 0.0186874612604834, -0.00109871944734209, -0.0120716364037634, -0.0151048951048951, -0.0103819229224908, -0.0623804619735576, -0.0382544527976884, -0.0201847651234558, -0.00762912411270201, 0.0, 0.00332962273644472, 0.00288353787477937};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048498, -0.0123717914826352, 0.0214285714285713, -0.16822907123373, -0.0151522881682831, 0.00874817765279702, 0.0666938280954185, 0.0627321964403531, 0.00469220437740938, -0.0181368297771875, -0.036961686937033, -0.0586748590036885, -0.0243354931187578, 0.00960292795625939, 0.0164274164164592, -0.0602576501385106, 0.0233593265756043, 0.0310388243874132, 0.0109109021341708, -0.00755244755244756, -0.0103819229224908, 0.155951154933894, 0.0478180659971106, 0.00288353787477946, -0.007629124112702, -0.00386867202222118, 0.0016648113682224, 0.00288353787477942};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.107749604752236, 0.0, -0.0952380952380952, 0.132148934509183, 0.0, 0.0544331053951817, 0.0, -0.0082137082082295, 0.0, -0.0257129738613289, 0.0985644984987547, 0.0, -0.0293862558415189, 0.0, 0.0164274164164591, 0.0, -0.0622915375349447, 0.0, 0.0185717483134821, 0.0, -0.0103819229224909, -0.207934873245192, 0.0, 0.0173012272486764, 0.0, -0.00515822936296168, 0.0, 0.00288353787477947};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0454568645048497, 0.0123717914826345, 0.0214285714285714, -0.16822907123373, 0.0151522881682832, 0.00874817765279707, -0.0666938280954186, 0.0627321964403532, -0.00469220437740941, -0.0181368297771875, -0.0369616869370329, 0.0586748590036884, -0.0243354931187578, -0.00960292795625944, 0.0164274164164591, 0.060257650138511, 0.0233593265756043, -0.0310388243874132, 0.0109109021341708, 0.00755244755244758, -0.0103819229224907, 0.155951154933894, -0.0478180659971104, 0.00288353787477942, 0.00762912411270202, -0.00386867202222119, -0.00166481136822235, 0.00288353787477938};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.0606091526731326, 0.0494871659305394, -0.0514285714285715, 0.0899829915901345, -0.0757614408414158, 0.0454905237945448, 0.0014577885922496, -0.0406578556307363, 0.0518528348147609, -0.0358144993068511, -0.0295693495496264, -0.00651942877818761, 0.0261721341088527, -0.0309427678590581, 0.0209449559309854, -0.0482061201108087, 0.0186874612604834, 0.00109871944734202, -0.0120716364037634, 0.0151048951048951, -0.0103819229224908, -0.0623804619735576, 0.0382544527976884, -0.0201847651234558, 0.00762912411270203, 0.0, -0.00332962273644472, 0.00288353787477937};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.296922995583236, -0.171428571428571, 0.082158383625775, 0.0454568645048493, 0.0524890659167824, 0.042275869175238, -0.0373723723474444, 0.0276760529379396, 0.0486709862375157, -0.133062072973319, -0.0325971438909379, -0.0573950309404665, -0.0906943195868943, -0.0710485760011856, 0.103298828808876, -0.0186874612604834, -0.0065923166840523, 0.0445721959523571, 0.0766033966033966, 0.0591769606581974, 0.0, 0.0956361319942208, 0.0951567498677203, 0.0534038687889141, 0.00773734404444239, -0.0199777364186684, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.179965983180269, 0.0909137290096991, 0.0349927106111884, 0.230330597575435, 0.0583173282784298, -0.0782564255486574, -0.00183664099009501, 0.088708048648879, 0.065194287781876, 0.0725473191087495, -0.0106699199513993, -0.0484608784285544, -0.206597657617751, 0.0124583075069889, -0.0955885919187591, -0.0752155806696025, 0.0255344655344656, 0.0591769606581975, 0.0, -0.191272263988442, -0.0634378332451467, 0.0305164964508081, 0.0309493761777698, -0.00665924547288949, -0.0201847651234559};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142855, -0.179965983180269, -0.090913729009699, 0.0349927106111882, -0.230330597575435, 0.05831732827843, 0.0782564255486575, -0.001836640990095, 0.0887080486488794, -0.0651942877818761, 0.0725473191087498, 0.0106699199513992, -0.0484608784285543, 0.206597657617751, 0.012458307506989, 0.0955885919187591, -0.0752155806696026, -0.0255344655344655, 0.0591769606581973, 0.0, 0.191272263988442, -0.063437833245147, -0.030516496450808, 0.0309493761777698, 0.00665924547288946, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.296922995583236, -0.171428571428572, 0.0821583836257749, -0.0454568645048495, 0.0524890659167824, -0.0422758691752379, -0.0373723723474445, -0.0276760529379397, 0.0486709862375156, -0.133062072973319, 0.0325971438909381, -0.0573950309404665, 0.0906943195868944, -0.0710485760011858, -0.103298828808876, -0.0186874612604834, 0.00659231668405231, 0.0445721959523571, -0.0766033966033967, 0.0591769606581975, 0.0, -0.0956361319942211, 0.0951567498677204, -0.0534038687889141, 0.00773734404444248, 0.0199777364186685, -0.0201847651234558};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505167, -0.0909137290096988, -0.174963553055941, -0.0262401946604925, 0.0977431276779316, 0.211864956973195, 0.0863221265344617, 0.0, 0.117349718007377, 0.0449977042573257, 0.0448136637958771, 0.0451753951452625, 0.0, -0.137041382576878, -0.0197769500521572, -0.0501437204464018, -0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, -0.137324234028636, -0.0464240642666546, 0.0466147183102264, 0.0605542953703675};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {-0.0909137290096985, 0.0, 0.0, -0.046947647786157, 0.0, -0.0524890659167825, 0.0, -0.351136025901814, 0.0, 0.157032804653116, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.205562073865317, 0.0, 0.153216923586227, 0.0, -0.137041382576878, 0.0, 0.0, 0.19031349973544, 0.0, -0.0928481285333092, 0.0, 0.0605542953703673};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.171428571428571, 0.0547722557505166, 0.0909137290096993, -0.174963553055941, 0.0262401946604926, 0.0977431276779317, -0.211864956973194, 0.0863221265344616, 0.0, -0.117349718007377, 0.0449977042573258, -0.0448136637958771, 0.0451753951452626, 0.0, -0.137041382576878, 0.019776950052157, -0.0501437204464017, 0.146013986013986, -0.137041382576878, 0.0, 0.0, -0.126875666490294, 0.137324234028636, -0.0464240642666546, -0.0466147183102265, 0.0605542953703676};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, -0.148461497791618, -0.0857142857142859, -0.062596863714876, -0.181827458019398, -0.0699854212223768, 0.0583115436899834, -0.00821370820822939, -0.190869330606481, -0.150604561187784, 0.0, 0.0521554302255009, -0.0514259477226579, 0.0554835837472766, 0.106778206706984, 0.0, 0.0, 0.148327125391178, 0.0325005595485939, 0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, 0.137324234028636, 0.108322816622194, -0.0466147183102263, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.148461497791618, -0.0857142857142858, -0.0625968637148761, 0.181827458019398, -0.0699854212223763, -0.0583115436899836, -0.0082137082082297, 0.190869330606481, -0.150604561187784, 0.0, -0.0521554302255009, -0.0514259477226581, -0.0554835837472766, 0.106778206706984, 0.0, 0.0, -0.148327125391178, 0.0325005595485937, -0.113286713286713, 0.160919805298607, 0.0, 0.0, 0.0, -0.137324234028636, 0.108322816622194, 0.0466147183102265, -0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues
      double basisvalues[28] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[15] = basisvalues[10]*1.8*tmp0 - basisvalues[6]*0.8*tmp2;
      basisvalues[21] = basisvalues[15]*1.83333333333333*tmp0 - basisvalues[10]*0.833333333333333*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[16] = basisvalues[10]*(4.5 + 5.5*Y);
      basisvalues[22] = basisvalues[15]*(5.5 + 6.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[20] = basisvalues[14]*(0.0185185185185185 + Y*1.83333333333333) - basisvalues[9]*0.814814814814815;
      basisvalues[27] = basisvalues[20]*(0.012987012987013 + Y*1.85714285714286) - basisvalues[14]*0.844155844155844;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[19] = basisvalues[13]*(0.178571428571429 + Y*1.96428571428571) - basisvalues[8]*0.785714285714286;
      basisvalues[26] = basisvalues[19]*(0.122727272727273 + Y*1.95) - basisvalues[13]*0.827272727272727;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[18] = basisvalues[12]*(0.578703703703704 + Y*2.29166666666667) - basisvalues[7]*0.712962962962963;
      basisvalues[25] = basisvalues[18]*(0.378787878787879 + Y*2.16666666666667) - basisvalues[12]*0.787878787878788;
      basisvalues[17] = basisvalues[11]*(1.51234567901235 + Y*3.05555555555556) - basisvalues[6]*0.54320987654321;
      basisvalues[24] = basisvalues[17]*(0.890909090909091 + Y*2.6) - basisvalues[11]*0.709090909090909;
      basisvalues[23] = basisvalues[16]*(2.00826446280992 + Y*3.54545454545455) - basisvalues[10]*0.537190082644628;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[20] *= std::sqrt(3.0);
      basisvalues[27] *= std::sqrt(3.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[19] *= std::sqrt(9.0);
      basisvalues[26] *= std::sqrt(10.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[18] *= std::sqrt(15.0);
      basisvalues[25] *= std::sqrt(17.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[17] *= std::sqrt(21.0);
      basisvalues[24] *= std::sqrt(24.5);
      basisvalues[10] *= std::sqrt(22.5);
      basisvalues[16] *= std::sqrt(27.0);
      basisvalues[23] *= std::sqrt(31.5);
      basisvalues[15] *= std::sqrt(33.0);
      basisvalues[22] *= std::sqrt(38.5);
      basisvalues[21] *= std::sqrt(45.5);
      
      // Table(s) of coefficients
      static const double coefficients0[28] = \
      {0.121218305346265, 0.0, 0.342857142857143, 0.0234738238930786, 0.0, 0.104978131833565, 0.0, -0.073102003053243, 0.0, -0.0312228968316139, 0.0, 0.0, -0.0835671650493192, 0.0, -0.168381018268706, 0.0, 0.0, 0.0, -0.117002014374937, 0.0, -0.0934373063024168, 0.0, 0.0, 0.0, 0.0, -0.108322816622194, 0.0, 0.100923825617279};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, -2.1316282072803e-14, -2.27239420744426e-14, 2.25745500948587e-14, 1.86517468137026e-14, 0.0, 0.0, -1.50990331349021e-14, 0.0, 0.0, 1.95683192301941e-14, -1.78075930029088e-14, 1.6762199573916e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.74775469081757e-14, 9.48683298050515, 0.0, -2.36705788780544e-14, 0.0, 0.0, -1.30922018050039e-14, 0.0, 0.0, 0.0, -1.03078071513893e-14, 1.47739651649423e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.00000000000003, 1.02696101719622e-14, 7.07106781186545, -1.49297218915202e-14, 3.14415160573845e-14, 5.6843418860808e-14, 0.0, 0.0, 0.0, 1.24344978758018e-14, 0.0, 1.21127644153731e-14, -2.67826529706618e-14, 2.78856820039904e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 1.30193303586558e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4210854715202e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212922, -8.5197488390345e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660784, 0.0, 0.0, -1.9151347174784e-14, 0.0, 2.00725160224611e-14, -1.96330491362009e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25369690399104e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004134, 1.75761385636358e-14, -1.77070393170158e-14, 12.5219806739988, 3.26941048975319e-14, 0.0, 1.07197779536557e-14, 1.95399252334028e-14, 1.15213445899882e-14, 0.0, 4.56880926079545e-14, 2.20871094560183e-14, -2.30926389122032e-14, 4.4515617743217e-14, 0.0, 0.0, -1.16518025557011e-14, 0.0, 0.0, 0.0, 0.0, 2.23548289852906e-14, 0.0, 0.0, 0.0, -2.39808173319034e-14, 0.0},
      {3.46410161513776, 1.38358816344144e-14, 7.83836717690619, 0.0, 0.0, 8.4, 1.02429015106102e-14, 1.03021886402969e-14, 0.0, 2.1316282072803e-14, 0.0, 0.0, -1.60762045266135e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.09061155329399e-14, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-8.14894967135286e-14, 10.9544511501033, 4.45867841944918e-14, -8.8387482599165e-14, -3.83325938999965, -5.73651562695127e-14, 17.7482393492989, 1.72406498356121e-14, 0.553283335172492, 0.0, 0.0, -1.89232391486858e-14, -2.42355985246015e-14, 0.0, -3.06228707615318e-14, 0.0, 0.0, 1.19081049420561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.18297655056059e-14, 0.0, 0.0, 0.0, -1.00027845049919e-14},
      {4.73286382647966, -6.95469148788344e-14, 3.34664010613628, 4.36435780471985, -7.6226210219221e-14, -5.07468037933238, 0.0, 17.0084012854152, 1.4210854715202e-14, 1.52127765851132, 0.0, -2.62119020599296e-14, -1.97122242034778e-14, 1.99223224528904e-14, 0.0, 0.0, 0.0, 0.0, -1.05306909484519e-14, -1.73200127940082e-14, 0.0, 0.0, -1.32268951688234e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.1161997959155e-14, 2.44948974278316, 0.0, -1.12827920241861e-14, 9.14285714285708, 2.02918697153978e-14, 0.0, 0.0, 14.8461497791618, 1.55487184450889e-14, 0.0, 3.97878323024236e-14, -2.14758219956333e-14, 1.06581410364015e-14, 2.52664355015508e-14, 0.0, 0.0, 0.0, 1.3785238686936e-14, -1.59872115546023e-14, 1.20129624358494e-14, 0.0, 1.67078610127031e-14, 0.0, 1.2256093194164e-14, 0.0, -1.06581410364015e-14, 1.04121020708118e-14},
      {3.09838667696595, 0.0, 7.66811580507238, -1.53500118697091e-14, -1.25671392148473e-14, 10.7331262919991, 0.0, 0.0, -2.93098878501041e-14, 9.29516003089783, 0.0, 0.0, 0.0, -1.54301383700282e-14, 4.2632564145606e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.04617169037006e-14, 0.0, 0.0, 1.77635683940025e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.41602560309059, -1.01784756750043e-13, -4.37680963545751, 15.7321327225522, 3.79301390814801e-14, 2.01017818278144, -1.11207944957901e-13, -4.03686713879665, 0.0, -0.515811962199099, 21.7990825495019, -1.28766518017245e-14, 0.451335466924214, -1.13104800060932e-14, 0.057669530554209, 0.0, 1.24771244363705e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.20389558526658e-14, -1.44889901999012e-14, 0.0, 0.0, 0.0, 0.0},
      {-2.78475143350402e-14, 6.85714285714283, -1.34733159742313e-14, -4.0008056257766e-14, 9.97292252418855, 5.47930251411804e-14, 4.32049379893858, -1.01917169376139e-13, -7.27309832077583, -3.45004166425628e-14, 0.0, 21.2540192277444, 2.73466977786704e-14, 1.49078803979364, 1.63925811052042e-14, 1.40526104061015e-14, 0.0, 0.0, 0.0, 1.55431223447522e-14, 0.0, 0.0, -3.39936708151467e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.32049379893851, -2.08116596395073e-14, 5.93552661441898, 1.79284291400154, -5.80428052795773e-14, -0.320713490294974, -2.16707555629871e-14, 9.20087412456472, -6.21724893790088e-14, -5.96639619853419, 0.0, 0.0, 19.8022632451351, 2.23283236702509e-14, 2.53024038425524, 0.0, 0.0, 0.0, 0.0, -2.50760509826384e-14, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, -2.09458683279724e-14, 0.0, -1.82076576038526e-14},
      {0.0, 1.53330375599982, 0.0, -2.3555054216861e-14, 6.33793245113119, -4.09157356783117e-14, -1.06860685607384e-14, 0.0, 13.5526185435787, -1.01270392305986e-14, -1.40594134489194e-14, 0.0, 0.0, 16.6675169851114, -2.68692315635561e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.59872115546022e-14, 0.0},
      {2.82842712474624, 0.0, 7.31428571428577, 0.0, -3.35463616749859e-14, 11.3376382380251, 2.02986823804416e-14, 0.0, -1.4210854715202e-14, 12.9299525702683, 0.0, -2.01860870383341e-14, -1.19629413305679e-14, -1.61090489199501e-14, 9.93858693195782, 0.0, 0.0, 0.0, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, -1.35461747579927e-14, 0.0, 0.0, 2.26485497023532e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-6.08178231773022e-14, 11.6833214455479, 2.38797434404083e-14, -9.5936268745773e-14, -6.35959467611285, -8.44034288497352e-14, 20.1910871425983, 5.00556651423865e-14, 2.20302821891438, 0.0, 0.0, -4.10442212640648, -3.0178106730187e-14, -0.44782916853114, -4.32269033768595e-14, 25.8327956933301, 0.0, 0.374680764026013, 0.0, 0.0408810229188688, 0.0, 0.0, 2.83369931153661e-14, 0.0, 1.12739473142816e-14, -1.21151756815319e-14, 1.15671361378133e-14, -1.48028544441887e-14},
      {5.01426536422399, -1.57906376550452e-14, 0.886405260427918, 7.55228687465169, 1.21401789023105e-14, -5.30747700600876, -6.68483994465988e-14, 15.6971334962788, 1.12299058940835e-13, 4.17855447018672, 4.28103640807597, -2.38950933637018e-14, -7.97724035217466, -1.53130746422873e-14, -1.46098861545453, -1.74914994154984e-14, 25.4022189438783, 1.17862201054089e-14, 1.26224640750767, 0.0, 0.201604912252978, 0.0, 4.13977806968458e-14, -6.41458863672651e-14, 2.83041344381859e-14, 2.56954258207768e-14, 0.0, 0.0},
      {7.59372409647469e-14, 4.62910049886269, -1.17030452146452e-14, 5.53960166464922e-14, 11.3389341902768, 1.43295802514482e-13, 1.39999999999994, -8.80687147068398e-14, 6.15374450465502, 6.6291224100117e-14, 0.0, 9.10689503563537, -3.14324352467296e-14, -9.7412570917953, 3.88001946605192e-14, 1.35676764471202e-14, 1.86422873508888e-14, 24.3167527192657, 4.34323486381919e-14, 2.65317523789424, 1.64567007299238e-14, 0.0, -3.65811776985982e-14, -1.46283909912188e-14, 1.36771833732602e-14, 3.596809320025e-14, 3.37507799486048e-14, 3.40242403016458e-14},
      {3.99999999999999, 2.90854968968708e-14, 7.07106781186544, 0.860662965823905, -2.88566880766745e-14, 3.84900179459743, -1.84511224513413e-14, 4.91934955049946, -3.28626015289046e-14, -3.66666666666666, 2.18267762663035e-14, 3.67819661211307e-14, 14.0, -7.59645046250185e-14, -5.96284793999952, 0.0, -1.68016096589369e-14, -1.7038737183143e-14, 22.1523345479867, 2.8455657114544e-14, 3.53815185068678, 1.03192300656341e-14, 0.0, 0.0, 1.97416636262938e-14, 2.1612364187197e-14, -2.30920225743206e-14, -3.46389583683049e-14},
      {2.54606124385245e-14, 1.03509833901358, 0.0, 4.3078158025578e-14, 4.50748935855202, -2.40141375317139e-14, 1.44610942641606e-14, 0.0, 10.7349008024337, -3.74153486461159e-14, 3.10559135508467e-14, 0.0, 3.96561925365388e-14, 17.4574312188792, -2.04993225868001e-14, 0.0, -1.14032695901346e-14, 0.0, -1.44125761168767e-14, 18.1276339082383, 0.0, 0.0, 0.0, 1.85227089700244e-14, -1.44017769901004e-14, 0.0, 0.0, 0.0},
      {2.6186146828319, 1.51939787057917e-14, 6.94365074829407, 0.0, -2.16789111692587e-14, 11.3389341902768, 0.0, 0.0, 3.73034936274053e-14, 14.4023807555754, 0.0, -3.0127978773417e-14, 0.0, 0.0, 14.6385010942279, 0.0, 0.0, 0.0, 0.0, 1.80065393555884e-14, 10.4231884345845, 0.0, 0.0, 0.0, -1.19806492839811e-14, 0.0, 0.0, -1.17683640610267e-14},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[28][28] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278319, 0.0, -1.02140518265514e-14, -1.01407257101336e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.2426406871193, 0.0, -1.73194791841524e-14, -1.57454853191983e-14, 1.59868943561154e-14, 1.24344978758018e-14, 0.0, 0.0, -1.33226762955019e-14, 0.0, 0.0, 1.7484420796336e-14, -1.72152714357738e-14, 1.45888023335897e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175295, -1.52768135764093e-14, 1.51700040142005e-14, 0.0, 0.0, 0.0, -1.55431223447522e-14, 0.0, 0.0, 2.32133953533332e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999993, 6.12372435695795, 3.53553390593272, 0.0, 0.0, 4.08562073062058e-14, 0.0, 0.0, 0.0, 1.68753899743024e-14, 0.0, 0.0, 0.0, 0.0, 3.28626015289046e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675848, 1.69617142177764e-14, 8.16496580927727, 1.48942451603267e-14, 0.0, 1.24344978758018e-14, 1.91336389349385e-14, 0.0, 1.15463194561016e-14, 1.59872115546023e-14, 0.0, -1.20327346825465e-14, 0.0, 0.0, 1.24344978758018e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106456, 5.18459255872623, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330376, 0.0, 0.0, -1.69170233377258e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2712053631958e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749985, 2.19089023002066, 2.52982212813467, 8.08290376865479, 6.2609903369994, -1.8073922282301, 0.0, 0.0, 0.0, 0.0, 1.68954722086433e-14, 1.3800781805729e-14, 0.0, 0.0, 1.77635683940025e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.25655313492445e-14, 1.22813916454919e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756889, -5.09116882454314, 3.91918358845311, 1.5761367996081e-14, 9.6994845223857, 4.2, 0.0, 0.0, 1.15463194561016e-14, 0.0, 0.0, 1.09367970342748e-14, 0.0, 2.06456118217396e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.10087067880214e-14, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.0, 0.0, -2.8284271247462, 0.0, -1.43095412062798e-14, 12.1243556529822, 0.0, 0.0, -1.19904086659517e-14, 1.06581410364015e-14, 0.0, 0.0, 0.0, -2.25187695376823e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505162, -1.89736659610101, 7.42307488958088, -1.91662969499982, 0.663940002206965, 8.87411967464944, -1.07142857142856, 0.276641667586237, -0.0958314847499965, 0.0, -1.10898395980859e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323982, 2.89827534923781, 1.67332005306814, 2.18217890235989, 5.74704893215389, -2.5373401896662, 10.062305898749, 8.50420064270764, -2.19577516413419, 0.76063882925565, 1.9236263273881e-14, 1.09017289131962e-14, -1.23713153715397e-14, 3.0167220274623e-14, -1.19904086659517e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999995, 1.22474487139159, 3.53553390593272, -7.37711113563324, 4.57142857142852, 1.6495721976846, -1.22051867547624e-14, 11.4997781699989, 7.42307488958091, -2.57142857142858, 0.0, 0.0, -1.62728895261883e-14, -1.37780651159287e-14, -5.59552404411079e-14, 0.0, 0.0, 0.0, 0.0, -1.51781181456039e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8615896329417e-14, -1.46549439250521e-14},
      {1.54919333848287, 6.64078308635357, 3.83405790253616, -3.35675908447745e-14, -6.19677335393182, 5.36656314599945, 0.0, 0.0, 13.4164078649987, 4.64758001544889, -1.44546757378396e-14, -1.12150316588742e-14, -3.80447643258166e-14, 0.0, -5.15143483426073e-14, 0.0, 0.0, 0.0, 1.27011320866491e-14, 0.0, 0.0, 0.0, -1.10112709277091e-14, -1.51291519032289e-14, 0.0, 0.0, 0.0, -1.4210854715202e-14},
      {-3.57770876399963, 0.0, 8.85437744847145, -1.28431903049023e-14, -1.12412310300226e-14, -3.09838667696585, 1.27286624676217e-14, 0.0, -3.28626015289046e-14, 16.0996894379985, 0.0, 1.9577259132647e-14, 0.0, 0.0, 1.24344978758018e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 3.70814490224802e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.36317648677687e-14},
      {2.70801280154529, 5.68564249775205, -2.18840481772875, 7.86606636127611, -2.61129805863297, 1.00508909139071, 9.55297122675759, -2.01843356939833, 0.670059394260493, -0.25790598109955, 10.899541274751, -1.06805465250649, 0.225667733462097, -0.0749149177264442, 0.0288347652770993, 0.0, 1.280978795776e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.63180194292464e-14, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278311, 3.42857142857134, 0.989743318610809, 3.04933917230516, 4.98646126209428, -2.72741187029097, 2.16024689946921, 8.34624849531677, -3.63654916038791, 1.51635079315148, 12.0498962651136, 10.6270096138722, -2.24536559755125, 0.745394019896794, -0.286902292026531, 1.34085045053611e-14, 1.7878321202763e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -2.73160830878874e-14, -1.67902250882598e-14, 0.0, 0.0, -1.05487192054117e-14, 0.0},
      {2.16024689946926, 1.81422947044429, 2.96776330720947, 0.896421457000781, 5.41604758366937, -0.160356745147487, -9.52579344415684, 4.60043706228228, 5.34522483824852, -2.98319809926708, -2.52397790568825e-14, 13.3887736279041, 9.90113162256755, -3.28687867566956, 1.26512019212763, 0.0, 0.0, 0.0, 1.31661361256732e-14, -1.26490477937817e-14, 1.24344978758018e-14, 0.0, -2.35202393566509e-14, 0.0, 2.47032089203775e-14, -1.77134820328201e-14, 0.0, 0.0},
      {1.82574185835054, 0.766651877999931, 3.83609779052927, 8.6368042559214, 3.16896622556559, 3.65920700676621, -1.707667244424e-14, -8.74817765279709, 6.77630927178931, 0.521640530957312, -2.05901069817747e-14, 2.43661709904036e-14, 15.0623703313921, 8.33375849255568, -3.20766513935895, 0.0, 0.0, 0.0, 0.0, -2.10228940336115e-14, 1.13242748511766e-14, 0.0, 0.0, 0.0, 0.0, -1.22602700426327e-14, -2.80137457949821e-14, 0.0},
      {1.41421356237305, -6.73025456655333, 3.65714285714294, -2.16411238409888e-14, 9.45502781700866, 5.66881911901247, 0.0, 1.57858437029216e-14, -6.99854212223766, 6.46497628513413, -1.92847395143575e-14, 0.0, 1.75004172556317e-14, 17.2141375215909, 4.96929346597891, 0.0, 0.0, 0.0, -1.21391184059156e-14, 1.54382993131843e-14, 0.0, 0.0, 0.0, 0.0, -1.30989974890355e-14, 0.0, -2.20325084624463e-14, 0.0},
      {5.71547606649414, 0.0, -4.61880215351707, 1.51199207773134e-14, -5.16230204160064e-14, 12.7279220613579, 2.35186221650061e-14, 1.42293831232415e-14, 4.61852778244065e-14, -3.2659863237109, 1.21387682761948e-14, -6.49972485193406e-14, 0.0, 0.0, 20.0831604418561, 0.0, 0.0, 0.0, 0.0, 2.10827133273566e-14, -2.57571741713036e-14, 0.0, -1.81411251899363e-14, 0.0, -1.34777277416721e-14, 0.0, 0.0, -3.46389583683049e-14},
      {2.72554057547694, 5.84166072277394, -2.40906027914856, 8.21020142307158, -3.17979733805645, 1.31132632078235, 10.0955435712992, -2.84409720102685, 1.10151410945721, -0.454256762579489, 11.6349430951099, -2.05221106320326, 0.578144970555699, -0.223914584265583, 0.0923408182151224, 12.916397846665, -1.06212013141344, 0.187340382013012, -0.0527771736469159, 0.0204405114594388, -0.00842952485249259, 0.0, 0.0, -1.09470486756006e-14, 0.0, 0.0, 0.0, 0.0},
      {2.50713268211193, 3.83824736789364, 0.443202630214002, 3.77614343732572, 4.17855447018676, -2.65373850300442, 3.09551647099828, 7.84856674813939, -4.48723055962555, 2.08927723509337, 2.14051820403789, 10.6973044844168, -3.98862017608733, 1.70662067037584, -0.730494307727255, 14.0416048465504, 12.7011094719391, -2.24026513582385, 0.631123203753829, -0.244432965754368, 0.10080245612649, -1.17184692310982e-14, 1.39359957667014e-14, -2.92246016987181e-14, 3.28249302028775e-14, 0.0, 0.0, 1.23859256184744e-14},
      {2.26778683805535, 2.31455024943141, 2.40535117721178, 1.46385010942278, 5.66946709513832, -1.30930734141588, 0.700000000000013, 6.00059520857235, 3.07687225232756, -2.45676907455995, -11.6170293922684, 4.55344751781767, 8.41829962611457, -4.87062854589768, 2.27423326726946, 0.0, 15.3181143780549, 12.1583763596329, -3.42523450364474, 1.32658761894711, -0.547075513501951, 0.0, 1.23985638915978e-14, -3.33680329695763e-14, 2.12596025389278e-14, 0.0, 0.0, 1.72084568816899e-14},
      {2.00000000000003, 1.22474487139155, 3.53553390593275, 0.430331482911908, 4.3333333333333, 1.92450089729879, 10.6711969546272, 2.45967477524978, 6.98593825719439, -1.8333333333333, 0.0, -11.0433489284526, 6.99999999999993, 4.38938112570171, -2.9814239699997, 0.0, 0.0, 16.8499258158604, 11.0761672739934, -4.28978113919837, 1.76907592534339, 0.0, 0.0, 0.0, 0.0, 4.18625740944927e-14, 0.0, 0.0},
      {1.69030850945706, 0.517549169506793, 3.88449298033675, -9.09241209316632, 2.253744679276, 4.71685035258455, 4.00743564001192e-14, 11.0869578749373, 5.36745040121689, 3.09889893400451, 5.09549791819993e-14, -1.76091395698674e-14, -9.86013297183271, 8.72871560943964, -0.629940788348681, 1.48831429897789e-14, -2.59263788036828e-14, 0.0, 18.7221397954005, 9.06381695411916, -3.73785511310443, 1.74255154187771e-14, 0.0, 1.54387792851199e-14, 0.0, 1.37858695788543e-14, 0.0, 0.0},
      {1.30930734141607, 7.61694539450412, 3.47182537414699, 4.97201588901915e-14, -8.51049771920378, 5.66946709513845, 4.51262388287281e-14, 0.0, 12.4728276093045, 7.20119037778768, 4.16091025754766e-14, -3.72182166303484e-14, 5.40382342657868e-14, -7.60638829255668, 7.31925054711398, 1.81947458706929e-14, -1.74521523552437e-14, 0.0, 0.0, 21.0624072698255, 5.21159421729228, 0.0, -1.0128288803007e-14, 2.68547549326743e-14, 0.0, 0.0, 1.8536915398153e-14, -1.46549439250521e-14},
      {-4.5355736761108, 2.34364003577553e-14, 9.62140470884728, 0.0, 5.65694940210589e-14, -5.2372293656638, -4.36001451627389e-14, 0.0, 5.44009282066327e-14, 16.6304368124059, -1.88835956362532e-14, 3.61151791985041e-14, 0.0, 0.0, -3.38061701891408, -1.18157570479878e-14, 0.0, 0.0, 0.0, 0.0, 24.0713225940863, -1.16797106627947e-14, 0.0, 0.0, 1.10042596438603e-14, 0.0, 0.0, -2.1316282072803e-14}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[64];
      for (unsigned int r = 0; r < 64; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[28][28] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 28; t++)
        {
          for (unsigned int u = 0; u < 28; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 28; t++)
          {
            for (unsigned int u = 0; u < 28; u++)
            {
              for (unsigned int tu = 0; tu < 28; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 28; s++)
        {
          for (unsigned int t = 0; t < 28; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 28; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 6)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[64];
    for (unsigned int r = 0; r < 64; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 28; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
      y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 21:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 22:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 23:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 24:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 25:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 26:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 27:
      {
        y[0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
      y[1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
    y[1] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    y[1] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[27] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new auxforms_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class auxforms_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  auxforms_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 4, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233824, 0.0129602631893289, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421162, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.0259205263786579, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968254, 0.139104141588614, -0.0718330698348238, 0.0311046316543896, 0.0633508128977598, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277045, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845643, 0.00634920634920626, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, -0.139104141588614, 0.107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382573, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977598, 0.0267706045305259, 0.0622092633087792, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845643, 0.00634920634920621, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {-0.0314269680527352, 0.0, -0.0126984126984128, -0.243432247780074, 0.0, 0.0544331053951818, 0.0, 0.0936971158568409, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.0239443566116079, 0.0, 0.0107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.041902624070314, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.251415744421884, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.251415744421883, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 15; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[16][4];
    for (unsigned int row = 0; row < 16; row++)
    {
      for (unsigned int col = 0; col < 4; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[16][16];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233824, 0.0129602631893289, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421162, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.0259205263786579, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968254, 0.139104141588614, -0.0718330698348238, 0.0311046316543896, 0.0633508128977598, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277045, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845643, 0.00634920634920626, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, -0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382573, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977598, 0.0267706045305259, 0.0622092633087792, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845643, 0.00634920634920621, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {-0.0314269680527352, 0.0, -0.0126984126984128, -0.243432247780074, 0.0, 0.0544331053951818, 0.0, 0.0936971158568409, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.0239443566116079, 0.0, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.041902624070314, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.251415744421884, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.251415744421883, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186547, 0.0, 1.06581410364015e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212921, -5.05164625919128e-14, -2.99332590941917, 13.6626010212795, 0.0, 0.611010092660788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.50990331349021e-14, 0.0},
      {3.46410161513776, 0.0, 7.83836717690618, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-5.01948941673766e-14, 10.9544511501033, 3.70841635675611e-14, -7.99645407921091e-14, -3.83325938999966, -1.22279032086585e-14, 17.7482393492988, 1.10031507407824e-14, 0.553283335172497, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, -2.91226177026183e-14, 3.34664010613629, 4.36435780471985, -7.72715225139109e-14, -5.07468037933235, 0.0, 17.0084012854152, 2.88256750775579e-14, 1.52127765851132, 0.0, -1.19624848747263e-14, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278316, 0.0, 0.0, 9.14285714285707, 1.30197094873322e-14, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696594, 0.0, 7.66811580507236, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711929, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747162, 4.74341649025258, -0.91287092917528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.99999999999991, 6.12372435695794, 3.53553390593273, 0.0, 1.50990331349021e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.30940107675849, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106458, 5.18459255872626, -1.49666295470957, 6.83130051063973, -1.05830052442583, 0.305505046330396, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749984, 2.19089023002067, 2.52982212813468, 8.08290376865479, 6.26099033699942, -1.80739222823012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454315, 3.91918358845309, 0.0, 9.6994845223857, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.00000000000002, 0.0, -2.82842712474623, 0.0, 0.0, 12.1243556529822, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299972, 5.47722557505165, -1.89736659610101, 7.42307488958087, -1.91662969499983, 0.663940002206984, 8.87411967464943, -1.07142857142857, 0.276641667586249, -0.0958314847499904, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323984, 2.89827534923785, 1.67332005306815, 2.18217890235986, 5.74704893215388, -2.53734018966617, 10.062305898749, 8.50420064270762, -2.19577516413418, 0.760638829255662, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139158, 3.53553390593273, -7.37711113563323, 4.57142857142853, 1.64957219768467, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848291, 6.64078308635357, 3.83405790253616, 1.37089762322799e-14, -6.19677335393182, 5.36656314599952, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 1.01765024526089e-14, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399969, 0.0, 8.85437744847144, 0.0, -1.06581410364015e-14, -3.09838667696597, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[16];
      for (unsigned int r = 0; r < 16; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 15; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[16];
    for (unsigned int r = 0; r < 16; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 15; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.75*vertex_coordinates[2] + 0.25*vertex_coordinates[4];
      y[1] = 0.75*vertex_coordinates[3] + 0.25*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.25*vertex_coordinates[2] + 0.75*vertex_coordinates[4];
      y[1] = 0.25*vertex_coordinates[3] + 0.75*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.75*vertex_coordinates[0] + 0.25*vertex_coordinates[4];
      y[1] = 0.75*vertex_coordinates[1] + 0.25*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.75*vertex_coordinates[4];
      y[1] = 0.25*vertex_coordinates[1] + 0.75*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.75*vertex_coordinates[0] + 0.25*vertex_coordinates[2];
      y[1] = 0.75*vertex_coordinates[1] + 0.25*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.75*vertex_coordinates[2];
      y[1] = 0.25*vertex_coordinates[1] + 0.75*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.25*vertex_coordinates[4];
      y[1] = 0.25*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.25*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75*vertex_coordinates[2] + 0.25*vertex_coordinates[4];
    y[1] = 0.75*vertex_coordinates[3] + 0.25*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25*vertex_coordinates[2] + 0.75*vertex_coordinates[4];
    y[1] = 0.25*vertex_coordinates[3] + 0.75*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75*vertex_coordinates[0] + 0.25*vertex_coordinates[4];
    y[1] = 0.75*vertex_coordinates[1] + 0.25*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25*vertex_coordinates[0] + 0.75*vertex_coordinates[4];
    y[1] = 0.25*vertex_coordinates[1] + 0.75*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75*vertex_coordinates[0] + 0.25*vertex_coordinates[2];
    y[1] = 0.75*vertex_coordinates[1] + 0.25*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25*vertex_coordinates[0] + 0.75*vertex_coordinates[2];
    y[1] = 0.25*vertex_coordinates[1] + 0.75*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5*vertex_coordinates[0] + 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.25*vertex_coordinates[4];
    y[1] = 0.25*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.25*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new auxforms_finite_element_3();
  }

};

/// This class defines the interface for a finite element.

class auxforms_finite_element_4: public ufc::finite_element
{
public:

  /// Constructor
  auxforms_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_finite_element_4()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[2][1];
    for (unsigned int row = 0; row < 2; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K[0], K[1]}, {K[2], K[3]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[2][2];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[2];
      for (unsigned int r = 0; r < 2; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new auxforms_finite_element_4();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class auxforms_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  auxforms_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new auxforms_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class auxforms_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  auxforms_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Domain(Cell('triangle', 2)), 2, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 2*num_global_entities[0] + 2*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[1][0];
    dofs[10] = offset + c.entity_indices[1][1];
    dofs[11] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[7] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[11] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[19] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[23] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_dofmap_0();
        break;
      }
    case 1:
      {
        return new auxforms_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new auxforms_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class auxforms_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  auxforms_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 6, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + 5*num_global_entities[1] + 10*num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 28;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 7;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 5;
        break;
      }
    case 2:
      {
        return 10;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 5*c.entity_indices[1][0];
    dofs[4] = offset + 5*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 5*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 5*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 5*c.entity_indices[1][0] + 4;
    dofs[8] = offset + 5*c.entity_indices[1][1];
    dofs[9] = offset + 5*c.entity_indices[1][1] + 1;
    dofs[10] = offset + 5*c.entity_indices[1][1] + 2;
    dofs[11] = offset + 5*c.entity_indices[1][1] + 3;
    dofs[12] = offset + 5*c.entity_indices[1][1] + 4;
    dofs[13] = offset + 5*c.entity_indices[1][2];
    dofs[14] = offset + 5*c.entity_indices[1][2] + 1;
    dofs[15] = offset + 5*c.entity_indices[1][2] + 2;
    dofs[16] = offset + 5*c.entity_indices[1][2] + 3;
    dofs[17] = offset + 5*c.entity_indices[1][2] + 4;
    offset += 5*num_global_entities[1];
    dofs[18] = offset + 10*c.entity_indices[2][0];
    dofs[19] = offset + 10*c.entity_indices[2][0] + 1;
    dofs[20] = offset + 10*c.entity_indices[2][0] + 2;
    dofs[21] = offset + 10*c.entity_indices[2][0] + 3;
    dofs[22] = offset + 10*c.entity_indices[2][0] + 4;
    dofs[23] = offset + 10*c.entity_indices[2][0] + 5;
    dofs[24] = offset + 10*c.entity_indices[2][0] + 6;
    dofs[25] = offset + 10*c.entity_indices[2][0] + 7;
    dofs[26] = offset + 10*c.entity_indices[2][0] + 8;
    dofs[27] = offset + 10*c.entity_indices[2][0] + 9;
    offset += 10*num_global_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 7;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 8;
      dofs[3] = 9;
      dofs[4] = 10;
      dofs[5] = 11;
      dofs[6] = 12;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 13;
      dofs[3] = 14;
      dofs[4] = 15;
      dofs[5] = 16;
      dofs[6] = 17;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
          break;
        }
      case 1:
        {
          dofs[0] = 8;
        dofs[1] = 9;
        dofs[2] = 10;
        dofs[3] = 11;
        dofs[4] = 12;
          break;
        }
      case 2:
        {
          dofs[0] = 13;
        dofs[1] = 14;
        dofs[2] = 15;
        dofs[3] = 16;
        dofs[4] = 17;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 18;
      dofs[1] = 19;
      dofs[2] = 20;
      dofs[3] = 21;
      dofs[4] = 22;
      dofs[5] = 23;
      dofs[6] = 24;
      dofs[7] = 25;
      dofs[8] = 26;
      dofs[9] = 27;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.833333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[7] = 0.833333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[8] = 0.666666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[9] = 0.666666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[10] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[11] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[12] = 0.333333333333333*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[13] = 0.333333333333333*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[14] = 0.166666666666667*vertex_coordinates[2] + 0.833333333333333*vertex_coordinates[4];
    dof_coordinates[15] = 0.166666666666667*vertex_coordinates[3] + 0.833333333333333*vertex_coordinates[5];
    dof_coordinates[16] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[17] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[18] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[19] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[22] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[23] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[5];
    dof_coordinates[24] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[4];
    dof_coordinates[25] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[5];
    dof_coordinates[26] = 0.833333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2];
    dof_coordinates[27] = 0.833333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3];
    dof_coordinates[28] = 0.666666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2];
    dof_coordinates[29] = 0.666666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3];
    dof_coordinates[30] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[31] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[32] = 0.333333333333333*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2];
    dof_coordinates[33] = 0.333333333333333*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3];
    dof_coordinates[34] = 0.166666666666667*vertex_coordinates[0] + 0.833333333333333*vertex_coordinates[2];
    dof_coordinates[35] = 0.166666666666667*vertex_coordinates[1] + 0.833333333333333*vertex_coordinates[3];
    dof_coordinates[36] = 0.666666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[37] = 0.666666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[38] = 0.5*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[39] = 0.5*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[40] = 0.333333333333333*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[41] = 0.333333333333333*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[42] = 0.166666666666667*vertex_coordinates[0] + 0.666666666666667*vertex_coordinates[2] + 0.166666666666667*vertex_coordinates[4];
    dof_coordinates[43] = 0.166666666666667*vertex_coordinates[1] + 0.666666666666667*vertex_coordinates[3] + 0.166666666666667*vertex_coordinates[5];
    dof_coordinates[44] = 0.5*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[45] = 0.5*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[46] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[47] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[48] = 0.166666666666667*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[49] = 0.166666666666667*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    dof_coordinates[50] = 0.333333333333333*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[51] = 0.333333333333333*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[52] = 0.166666666666667*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[53] = 0.166666666666667*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[54] = 0.166666666666667*vertex_coordinates[0] + 0.166666666666667*vertex_coordinates[2] + 0.666666666666667*vertex_coordinates[4];
    dof_coordinates[55] = 0.166666666666667*vertex_coordinates[1] + 0.166666666666667*vertex_coordinates[3] + 0.666666666666667*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new auxforms_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class auxforms_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  auxforms_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 4, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0] + 3*num_global_entities[1] + 3*num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 5;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 3;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset += 3*num_global_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
    offset += 3*num_global_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
          break;
        }
      case 1:
        {
          dofs[0] = 6;
        dofs[1] = 7;
        dofs[2] = 8;
          break;
        }
      case 2:
        {
          dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 12;
      dofs[1] = 13;
      dofs[2] = 14;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = 0.75*vertex_coordinates[2] + 0.25*vertex_coordinates[4];
    dof_coordinates[7] = 0.75*vertex_coordinates[3] + 0.25*vertex_coordinates[5];
    dof_coordinates[8] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[9] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[10] = 0.25*vertex_coordinates[2] + 0.75*vertex_coordinates[4];
    dof_coordinates[11] = 0.25*vertex_coordinates[3] + 0.75*vertex_coordinates[5];
    dof_coordinates[12] = 0.75*vertex_coordinates[0] + 0.25*vertex_coordinates[4];
    dof_coordinates[13] = 0.75*vertex_coordinates[1] + 0.25*vertex_coordinates[5];
    dof_coordinates[14] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[15] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[16] = 0.25*vertex_coordinates[0] + 0.75*vertex_coordinates[4];
    dof_coordinates[17] = 0.25*vertex_coordinates[1] + 0.75*vertex_coordinates[5];
    dof_coordinates[18] = 0.75*vertex_coordinates[0] + 0.25*vertex_coordinates[2];
    dof_coordinates[19] = 0.75*vertex_coordinates[1] + 0.25*vertex_coordinates[3];
    dof_coordinates[20] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[21] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[22] = 0.25*vertex_coordinates[0] + 0.75*vertex_coordinates[2];
    dof_coordinates[23] = 0.25*vertex_coordinates[1] + 0.75*vertex_coordinates[3];
    dof_coordinates[24] = 0.5*vertex_coordinates[0] + 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[4];
    dof_coordinates[25] = 0.5*vertex_coordinates[1] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[5];
    dof_coordinates[26] = 0.25*vertex_coordinates[0] + 0.5*vertex_coordinates[2] + 0.25*vertex_coordinates[4];
    dof_coordinates[27] = 0.25*vertex_coordinates[1] + 0.5*vertex_coordinates[3] + 0.25*vertex_coordinates[5];
    dof_coordinates[28] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[29] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new auxforms_dofmap_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class auxforms_dofmap_4: public ufc::dofmap
{
public:

  /// Constructor
  auxforms_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_dofmap_4()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new auxforms_dofmap_4();
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class auxforms_exterior_facet_integral_0_2: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  auxforms_exterior_facet_integral_0_2() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_exterior_facet_integral_0_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      10
    // Number of operations (multiply-add pairs) for geometry tensor:    58
    // Number of operations (multiply-add pairs) for tensor contraction: 75
    // Total number of operations (multiply-add pairs):                  143
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet][0];
    const unsigned int v1 = edge_vertices[facet][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = vertex_coordinates[2*v1 + 0] - vertex_coordinates[2*v0 + 0];
    const double dx1 = vertex_coordinates[2*v1 + 1] - vertex_coordinates[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[2][0]*w[0][0]*(1.0);
    const double G0_0_1 = det*w[2][0]*w[0][1]*(1.0);
    const double G0_0_2 = det*w[2][0]*w[0][2]*(1.0);
    const double G0_1_0 = det*w[2][1]*w[0][0]*(1.0);
    const double G0_1_1 = det*w[2][1]*w[0][1]*(1.0);
    const double G0_1_2 = det*w[2][1]*w[0][2]*(1.0);
    const double G0_2_0 = det*w[2][2]*w[0][0]*(1.0);
    const double G0_2_1 = det*w[2][2]*w[0][1]*(1.0);
    const double G0_2_2 = det*w[2][2]*w[0][2]*(1.0);
    const double G0_3_1 = det*w[2][3]*w[0][1]*(1.0);
    const double G0_3_2 = det*w[2][3]*w[0][2]*(1.0);
    const double G0_4_0 = det*w[2][4]*w[0][0]*(1.0);
    const double G0_4_2 = det*w[2][4]*w[0][2]*(1.0);
    const double G0_5_0 = det*w[2][5]*w[0][0]*(1.0);
    const double G0_5_1 = det*w[2][5]*w[0][1]*(1.0);
    const double G1_0_0 = det*w[2][0]*w[1][0]*(1.0);
    const double G1_0_1 = det*w[2][0]*w[1][1]*(1.0);
    const double G1_0_2 = det*w[2][0]*w[1][2]*(1.0);
    const double G1_0_4 = det*w[2][0]*w[1][4]*(1.0);
    const double G1_0_5 = det*w[2][0]*w[1][5]*(1.0);
    const double G1_1_0 = det*w[2][1]*w[1][0]*(1.0);
    const double G1_1_1 = det*w[2][1]*w[1][1]*(1.0);
    const double G1_1_2 = det*w[2][1]*w[1][2]*(1.0);
    const double G1_1_3 = det*w[2][1]*w[1][3]*(1.0);
    const double G1_1_5 = det*w[2][1]*w[1][5]*(1.0);
    const double G1_2_0 = det*w[2][2]*w[1][0]*(1.0);
    const double G1_2_1 = det*w[2][2]*w[1][1]*(1.0);
    const double G1_2_2 = det*w[2][2]*w[1][2]*(1.0);
    const double G1_2_3 = det*w[2][2]*w[1][3]*(1.0);
    const double G1_2_4 = det*w[2][2]*w[1][4]*(1.0);
    const double G1_3_1 = det*w[2][3]*w[1][1]*(1.0);
    const double G1_3_2 = det*w[2][3]*w[1][2]*(1.0);
    const double G1_3_3 = det*w[2][3]*w[1][3]*(1.0);
    const double G1_4_0 = det*w[2][4]*w[1][0]*(1.0);
    const double G1_4_2 = det*w[2][4]*w[1][2]*(1.0);
    const double G1_4_4 = det*w[2][4]*w[1][4]*(1.0);
    const double G1_5_0 = det*w[2][5]*w[1][0]*(1.0);
    const double G1_5_1 = det*w[2][5]*w[1][1]*(1.0);
    const double G1_5_5 = det*w[2][5]*w[1][5]*(1.0);
    
    // Compute element tensor
    switch (facet)
    {
    case 0:
      {
        A[0] = 0.0;
      A[1] = 0.15*G0_1_1 + 0.0166666666666666*G0_1_2 - 0.0166666666666666*G0_2_1 + 0.0166666666666667*G0_2_2 + 0.2*G0_3_1 + 0.133333333333333*G0_3_2 - 0.116666666666667*G1_1_1 + 0.0166666666666667*G1_1_2 - 0.0666666666666666*G1_1_3 + 0.0166666666666667*G1_2_1 - 0.0166666666666667*G1_2_2 - 0.0666666666666666*G1_3_1 - 0.266666666666666*G1_3_3;
      A[2] = 0.0166666666666666*G0_1_1 - 0.0166666666666667*G0_1_2 + 0.0166666666666667*G0_2_1 + 0.15*G0_2_2 + 0.133333333333333*G0_3_1 + 0.2*G0_3_2 - 0.0166666666666667*G1_1_1 + 0.0166666666666666*G1_1_2 + 0.0166666666666666*G1_2_1 - 0.116666666666667*G1_2_2 - 0.0666666666666666*G1_2_3 - 0.0666666666666666*G1_3_2 - 0.266666666666666*G1_3_3;
        break;
      }
    case 1:
      {
        A[0] = 0.15*G0_0_0 + 0.0166666666666667*G0_0_2 - 0.0166666666666666*G0_2_0 + 0.0166666666666667*G0_2_2 + 0.2*G0_4_0 + 0.133333333333333*G0_4_2 - 0.116666666666667*G1_0_0 + 0.0166666666666666*G1_0_2 - 0.0666666666666666*G1_0_4 + 0.0166666666666666*G1_2_0 - 0.0166666666666667*G1_2_2 - 0.0666666666666666*G1_4_0 - 0.266666666666666*G1_4_4;
      A[1] = 0.0;
      A[2] = 0.0166666666666667*G0_0_0 - 0.0166666666666666*G0_0_2 + 0.0166666666666667*G0_2_0 + 0.15*G0_2_2 + 0.133333333333333*G0_4_0 + 0.2*G0_4_2 - 0.0166666666666667*G1_0_0 + 0.0166666666666666*G1_0_2 + 0.0166666666666666*G1_2_0 - 0.116666666666667*G1_2_2 - 0.0666666666666666*G1_2_4 - 0.0666666666666666*G1_4_2 - 0.266666666666666*G1_4_4;
        break;
      }
    case 2:
      {
        A[0] = 0.15*G0_0_0 + 0.0166666666666667*G0_0_1 - 0.0166666666666666*G0_1_0 + 0.0166666666666667*G0_1_1 + 0.2*G0_5_0 + 0.133333333333333*G0_5_1 - 0.116666666666667*G1_0_0 + 0.0166666666666666*G1_0_1 - 0.0666666666666666*G1_0_5 + 0.0166666666666666*G1_1_0 - 0.0166666666666666*G1_1_1 - 0.0666666666666666*G1_5_0 - 0.266666666666667*G1_5_5;
      A[1] = 0.0166666666666667*G0_0_0 - 0.0166666666666667*G0_0_1 + 0.0166666666666667*G0_1_0 + 0.15*G0_1_1 + 0.133333333333333*G0_5_0 + 0.2*G0_5_1 - 0.0166666666666667*G1_0_0 + 0.0166666666666667*G1_0_1 + 0.0166666666666667*G1_1_0 - 0.116666666666667*G1_1_1 - 0.0666666666666666*G1_1_5 - 0.0666666666666666*G1_5_1 - 0.266666666666667*G1_5_5;
      A[2] = 0.0;
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class auxforms_exterior_facet_integral_1_2: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  auxforms_exterior_facet_integral_1_2() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_exterior_facet_integral_1_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      10
    // Number of operations (multiply-add pairs) for geometry tensor:    58
    // Number of operations (multiply-add pairs) for tensor contraction: 118
    // Total number of operations (multiply-add pairs):                  186
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet][0];
    const unsigned int v1 = edge_vertices[facet][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = vertex_coordinates[2*v1 + 0] - vertex_coordinates[2*v0 + 0];
    const double dx1 = vertex_coordinates[2*v1 + 1] - vertex_coordinates[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[2][0]*w[0][0]*(1.0);
    const double G0_0_1 = det*w[2][0]*w[0][1]*(1.0);
    const double G0_0_2 = det*w[2][0]*w[0][2]*(1.0);
    const double G0_1_0 = det*w[2][1]*w[0][0]*(1.0);
    const double G0_1_1 = det*w[2][1]*w[0][1]*(1.0);
    const double G0_1_2 = det*w[2][1]*w[0][2]*(1.0);
    const double G0_2_0 = det*w[2][2]*w[0][0]*(1.0);
    const double G0_2_1 = det*w[2][2]*w[0][1]*(1.0);
    const double G0_2_2 = det*w[2][2]*w[0][2]*(1.0);
    const double G0_3_1 = det*w[2][3]*w[0][1]*(1.0);
    const double G0_3_2 = det*w[2][3]*w[0][2]*(1.0);
    const double G0_4_0 = det*w[2][4]*w[0][0]*(1.0);
    const double G0_4_2 = det*w[2][4]*w[0][2]*(1.0);
    const double G0_5_0 = det*w[2][5]*w[0][0]*(1.0);
    const double G0_5_1 = det*w[2][5]*w[0][1]*(1.0);
    const double G1_0_0 = det*w[2][0]*w[1][0]*(1.0);
    const double G1_0_1 = det*w[2][0]*w[1][1]*(1.0);
    const double G1_0_2 = det*w[2][0]*w[1][2]*(1.0);
    const double G1_0_4 = det*w[2][0]*w[1][4]*(1.0);
    const double G1_0_5 = det*w[2][0]*w[1][5]*(1.0);
    const double G1_1_0 = det*w[2][1]*w[1][0]*(1.0);
    const double G1_1_1 = det*w[2][1]*w[1][1]*(1.0);
    const double G1_1_2 = det*w[2][1]*w[1][2]*(1.0);
    const double G1_1_3 = det*w[2][1]*w[1][3]*(1.0);
    const double G1_1_5 = det*w[2][1]*w[1][5]*(1.0);
    const double G1_2_0 = det*w[2][2]*w[1][0]*(1.0);
    const double G1_2_1 = det*w[2][2]*w[1][1]*(1.0);
    const double G1_2_2 = det*w[2][2]*w[1][2]*(1.0);
    const double G1_2_3 = det*w[2][2]*w[1][3]*(1.0);
    const double G1_2_4 = det*w[2][2]*w[1][4]*(1.0);
    const double G1_3_1 = det*w[2][3]*w[1][1]*(1.0);
    const double G1_3_2 = det*w[2][3]*w[1][2]*(1.0);
    const double G1_3_3 = det*w[2][3]*w[1][3]*(1.0);
    const double G1_4_0 = det*w[2][4]*w[1][0]*(1.0);
    const double G1_4_2 = det*w[2][4]*w[1][2]*(1.0);
    const double G1_4_4 = det*w[2][4]*w[1][4]*(1.0);
    const double G1_5_0 = det*w[2][5]*w[1][0]*(1.0);
    const double G1_5_1 = det*w[2][5]*w[1][1]*(1.0);
    const double G1_5_5 = det*w[2][5]*w[1][5]*(1.0);
    
    // Compute element tensor
    switch (facet)
    {
    case 0:
      {
        A[0] = 0.0;
      A[1] = 0.116666666666667*G0_1_1 + 0.0166666666666667*G0_1_2 - 0.0166666666666666*G0_2_1 - 0.0166666666666666*G0_2_2 + 0.0666666666666666*G0_3_1 - 0.0928571428571428*G1_1_1 + 0.00714285714285713*G1_1_2 - 0.0476190476190476*G1_1_3 + 0.00714285714285713*G1_2_1 + 0.00714285714285714*G1_2_2 + 0.019047619047619*G1_2_3 - 0.0476190476190476*G1_3_1 + 0.019047619047619*G1_3_2 - 0.038095238095238*G1_3_3;
      A[2] = -0.0166666666666666*G0_1_1 - 0.0166666666666666*G0_1_2 + 0.0166666666666667*G0_2_1 + 0.116666666666667*G0_2_2 + 0.0666666666666666*G0_3_2 + 0.00714285714285713*G1_1_1 + 0.00714285714285714*G1_1_2 + 0.019047619047619*G1_1_3 + 0.00714285714285714*G1_2_1 - 0.0928571428571428*G1_2_2 - 0.0476190476190476*G1_2_3 + 0.019047619047619*G1_3_1 - 0.0476190476190476*G1_3_2 - 0.0380952380952381*G1_3_3;
      A[3] = 0.0666666666666666*G0_1_1 + 0.0666666666666666*G0_2_2 + 0.266666666666666*G0_3_1 + 0.266666666666666*G0_3_2 - 0.0476190476190476*G1_1_1 + 0.019047619047619*G1_1_2 - 0.038095238095238*G1_1_3 + 0.019047619047619*G1_2_1 - 0.0476190476190476*G1_2_2 - 0.0380952380952381*G1_2_3 - 0.038095238095238*G1_3_1 - 0.0380952380952381*G1_3_2 - 0.457142857142857*G1_3_3;
      A[4] = 0.0;
      A[5] = 0.0;
        break;
      }
    case 1:
      {
        A[0] = 0.116666666666667*G0_0_0 + 0.0166666666666667*G0_0_2 - 0.0166666666666666*G0_2_0 - 0.0166666666666666*G0_2_2 + 0.0666666666666666*G0_4_0 - 0.0928571428571428*G1_0_0 + 0.00714285714285714*G1_0_2 - 0.0476190476190476*G1_0_4 + 0.00714285714285714*G1_2_0 + 0.00714285714285713*G1_2_2 + 0.019047619047619*G1_2_4 - 0.0476190476190476*G1_4_0 + 0.019047619047619*G1_4_2 - 0.0380952380952381*G1_4_4;
      A[1] = 0.0;
      A[2] = -0.0166666666666666*G0_0_0 - 0.0166666666666666*G0_0_2 + 0.0166666666666667*G0_2_0 + 0.116666666666667*G0_2_2 + 0.0666666666666666*G0_4_2 + 0.00714285714285714*G1_0_0 + 0.00714285714285713*G1_0_2 + 0.019047619047619*G1_0_4 + 0.00714285714285713*G1_2_0 - 0.0928571428571428*G1_2_2 - 0.0476190476190476*G1_2_4 + 0.019047619047619*G1_4_0 - 0.0476190476190476*G1_4_2 - 0.0380952380952381*G1_4_4;
      A[3] = 0.0;
      A[4] = 0.0666666666666666*G0_0_0 + 0.0666666666666666*G0_2_2 + 0.266666666666666*G0_4_0 + 0.266666666666666*G0_4_2 - 0.0476190476190476*G1_0_0 + 0.019047619047619*G1_0_2 - 0.0380952380952381*G1_0_4 + 0.019047619047619*G1_2_0 - 0.0476190476190476*G1_2_2 - 0.0380952380952381*G1_2_4 - 0.0380952380952381*G1_4_0 - 0.0380952380952381*G1_4_2 - 0.457142857142857*G1_4_4;
      A[5] = 0.0;
        break;
      }
    case 2:
      {
        A[0] = 0.116666666666667*G0_0_0 + 0.0166666666666667*G0_0_1 - 0.0166666666666667*G0_1_0 - 0.0166666666666667*G0_1_1 + 0.0666666666666666*G0_5_0 - 0.0928571428571428*G1_0_0 + 0.00714285714285714*G1_0_1 - 0.0476190476190476*G1_0_5 + 0.00714285714285714*G1_1_0 + 0.00714285714285714*G1_1_1 + 0.019047619047619*G1_1_5 - 0.0476190476190476*G1_5_0 + 0.019047619047619*G1_5_1 - 0.0380952380952381*G1_5_5;
      A[1] = -0.0166666666666667*G0_0_0 - 0.0166666666666667*G0_0_1 + 0.0166666666666667*G0_1_0 + 0.116666666666667*G0_1_1 + 0.0666666666666666*G0_5_1 + 0.00714285714285714*G1_0_0 + 0.00714285714285714*G1_0_1 + 0.019047619047619*G1_0_5 + 0.00714285714285714*G1_1_0 - 0.0928571428571428*G1_1_1 - 0.0476190476190476*G1_1_5 + 0.019047619047619*G1_5_0 - 0.0476190476190476*G1_5_1 - 0.0380952380952381*G1_5_5;
      A[2] = 0.0;
      A[3] = 0.0;
      A[4] = 0.0;
      A[5] = 0.0666666666666666*G0_0_0 + 0.0666666666666667*G0_1_1 + 0.266666666666667*G0_5_0 + 0.266666666666666*G0_5_1 - 0.0476190476190476*G1_0_0 + 0.019047619047619*G1_0_1 - 0.0380952380952381*G1_0_5 + 0.019047619047619*G1_1_0 - 0.0476190476190476*G1_1_1 - 0.0380952380952381*G1_1_5 - 0.0380952380952381*G1_5_0 - 0.0380952380952381*G1_5_1 - 0.457142857142857*G1_5_5;
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class auxforms_exterior_facet_integral_2_2: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  auxforms_exterior_facet_integral_2_2() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_exterior_facet_integral_2_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      10
    // Number of operations (multiply-add pairs) for geometry tensor:    58
    // Number of operations (multiply-add pairs) for tensor contraction: 205
    // Total number of operations (multiply-add pairs):                  273
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet][0];
    const unsigned int v1 = edge_vertices[facet][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = vertex_coordinates[2*v1 + 0] - vertex_coordinates[2*v0 + 0];
    const double dx1 = vertex_coordinates[2*v1 + 1] - vertex_coordinates[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[2][0]*w[0][0]*(1.0);
    const double G0_0_1 = det*w[2][0]*w[0][1]*(1.0);
    const double G0_0_2 = det*w[2][0]*w[0][2]*(1.0);
    const double G0_1_0 = det*w[2][1]*w[0][0]*(1.0);
    const double G0_1_1 = det*w[2][1]*w[0][1]*(1.0);
    const double G0_1_2 = det*w[2][1]*w[0][2]*(1.0);
    const double G0_2_0 = det*w[2][2]*w[0][0]*(1.0);
    const double G0_2_1 = det*w[2][2]*w[0][1]*(1.0);
    const double G0_2_2 = det*w[2][2]*w[0][2]*(1.0);
    const double G0_3_1 = det*w[2][3]*w[0][1]*(1.0);
    const double G0_3_2 = det*w[2][3]*w[0][2]*(1.0);
    const double G0_4_0 = det*w[2][4]*w[0][0]*(1.0);
    const double G0_4_2 = det*w[2][4]*w[0][2]*(1.0);
    const double G0_5_0 = det*w[2][5]*w[0][0]*(1.0);
    const double G0_5_1 = det*w[2][5]*w[0][1]*(1.0);
    const double G1_0_0 = det*w[2][0]*w[1][0]*(1.0);
    const double G1_0_1 = det*w[2][0]*w[1][1]*(1.0);
    const double G1_0_2 = det*w[2][0]*w[1][2]*(1.0);
    const double G1_0_4 = det*w[2][0]*w[1][4]*(1.0);
    const double G1_0_5 = det*w[2][0]*w[1][5]*(1.0);
    const double G1_1_0 = det*w[2][1]*w[1][0]*(1.0);
    const double G1_1_1 = det*w[2][1]*w[1][1]*(1.0);
    const double G1_1_2 = det*w[2][1]*w[1][2]*(1.0);
    const double G1_1_3 = det*w[2][1]*w[1][3]*(1.0);
    const double G1_1_5 = det*w[2][1]*w[1][5]*(1.0);
    const double G1_2_0 = det*w[2][2]*w[1][0]*(1.0);
    const double G1_2_1 = det*w[2][2]*w[1][1]*(1.0);
    const double G1_2_2 = det*w[2][2]*w[1][2]*(1.0);
    const double G1_2_3 = det*w[2][2]*w[1][3]*(1.0);
    const double G1_2_4 = det*w[2][2]*w[1][4]*(1.0);
    const double G1_3_1 = det*w[2][3]*w[1][1]*(1.0);
    const double G1_3_2 = det*w[2][3]*w[1][2]*(1.0);
    const double G1_3_3 = det*w[2][3]*w[1][3]*(1.0);
    const double G1_4_0 = det*w[2][4]*w[1][0]*(1.0);
    const double G1_4_2 = det*w[2][4]*w[1][2]*(1.0);
    const double G1_4_4 = det*w[2][4]*w[1][4]*(1.0);
    const double G1_5_0 = det*w[2][5]*w[1][0]*(1.0);
    const double G1_5_1 = det*w[2][5]*w[1][1]*(1.0);
    const double G1_5_5 = det*w[2][5]*w[1][5]*(1.0);
    
    // Compute element tensor
    switch (facet)
    {
    case 0:
      {
        A[0] = 0.0;
      A[1] = 0.0658730158730158*G0_1_1 + 0.00396825396825397*G0_1_2 - 0.00396825396825397*G0_2_1 - 0.00396825396825398*G0_2_2 + 0.0158730158730158*G0_3_1 - 0.0589947089947089*G1_1_1 + 0.0029100529100529*G1_1_2 - 0.0137566137566137*G1_1_3 + 0.0029100529100529*G1_2_1 + 0.00291005291005292*G1_2_2 + 0.00211640211640213*G1_2_3 - 0.0137566137566137*G1_3_1 + 0.00211640211640213*G1_3_2 - 0.0042328042328042*G1_3_3;
      A[2] = -0.00396825396825396*G0_1_1 - 0.00396825396825395*G0_1_2 + 0.00396825396825396*G0_2_1 + 0.0658730158730157*G0_2_2 + 0.0158730158730158*G0_3_2 + 0.0029100529100529*G1_1_1 + 0.0029100529100529*G1_1_2 + 0.00211640211640211*G1_1_3 + 0.0029100529100529*G1_2_1 - 0.0589947089947088*G1_2_2 - 0.0137566137566137*G1_2_3 + 0.00211640211640211*G1_3_1 - 0.0137566137566137*G1_3_2 - 0.00423280423280418*G1_3_3;
      A[3] = 0.139682539682539*G0_1_1 + 0.0253968253968253*G0_1_2 - 0.0253968253968253*G0_2_1 + 0.0126984126984127*G0_2_2 + 0.152380952380952*G0_3_1 + 0.0507936507936506*G0_3_2 - 0.0973544973544971*G1_1_1 + 0.0169312169312169*G1_1_2 - 0.0846560846560844*G1_1_3 + 0.0169312169312169*G1_2_1 - 0.0211640211640211*G1_2_2 + 0.0169312169312169*G1_2_3 - 0.0846560846560844*G1_3_1 + 0.0169312169312169*G1_3_2 - 0.135449735449735*G1_3_3;
      A[4] = -0.0476190476190475*G0_1_1 - 0.0476190476190475*G0_2_2 + 0.114285714285714*G0_3_1 + 0.114285714285714*G0_3_2 + 0.0412698412698412*G1_1_1 - 0.00634920634920633*G1_1_2 + 0.0126984126984127*G1_1_3 - 0.00634920634920633*G1_2_1 + 0.0412698412698412*G1_2_2 + 0.0126984126984126*G1_2_3 + 0.0126984126984127*G1_3_1 + 0.0126984126984126*G1_3_2 - 0.253968253968254*G1_3_3;
      A[5] = 0.0126984126984127*G0_1_1 - 0.0253968253968253*G0_1_2 + 0.0253968253968254*G0_2_1 + 0.139682539682539*G0_2_2 + 0.0507936507936507*G0_3_1 + 0.152380952380952*G0_3_2 - 0.0211640211640211*G1_1_1 + 0.0169312169312169*G1_1_2 + 0.0169312169312169*G1_1_3 + 0.0169312169312169*G1_2_1 - 0.0973544973544972*G1_2_2 - 0.0846560846560845*G1_2_3 + 0.0169312169312169*G1_3_1 - 0.0846560846560845*G1_3_2 - 0.135449735449735*G1_3_3;
      A[6] = 0.0;
      A[7] = 0.0;
      A[8] = 0.0;
      A[9] = 0.0;
      A[10] = 0.0;
      A[11] = 0.0;
      A[12] = 0.0;
      A[13] = 0.0;
      A[14] = 0.0;
        break;
      }
    case 1:
      {
        A[0] = 0.0658730158730157*G0_0_0 + 0.00396825396825396*G0_0_2 - 0.00396825396825396*G0_2_0 - 0.00396825396825397*G0_2_2 + 0.0158730158730158*G0_4_0 - 0.0589947089947089*G1_0_0 + 0.0029100529100529*G1_0_2 - 0.0137566137566137*G1_0_4 + 0.0029100529100529*G1_2_0 + 0.00291005291005291*G1_2_2 + 0.00211640211640211*G1_2_4 - 0.0137566137566137*G1_4_0 + 0.00211640211640211*G1_4_2 - 0.00423280423280424*G1_4_4;
      A[1] = 0.0;
      A[2] = -0.00396825396825396*G0_0_0 - 0.00396825396825396*G0_0_2 + 0.00396825396825397*G0_2_0 + 0.0658730158730157*G0_2_2 + 0.0158730158730158*G0_4_2 + 0.0029100529100529*G1_0_0 + 0.00291005291005291*G1_0_2 + 0.00211640211640211*G1_0_4 + 0.00291005291005291*G1_2_0 - 0.0589947089947089*G1_2_2 - 0.0137566137566137*G1_2_4 + 0.00211640211640211*G1_4_0 - 0.0137566137566137*G1_4_2 - 0.00423280423280421*G1_4_4;
      A[3] = 0.0;
      A[4] = 0.0;
      A[5] = 0.0;
      A[6] = 0.139682539682539*G0_0_0 + 0.0253968253968253*G0_0_2 - 0.0253968253968253*G0_2_0 + 0.0126984126984127*G0_2_2 + 0.152380952380952*G0_4_0 + 0.0507936507936507*G0_4_2 - 0.0973544973544972*G1_0_0 + 0.0169312169312169*G1_0_2 - 0.0846560846560844*G1_0_4 + 0.0169312169312169*G1_2_0 - 0.0211640211640211*G1_2_2 + 0.0169312169312169*G1_2_4 - 0.0846560846560844*G1_4_0 + 0.0169312169312169*G1_4_2 - 0.135449735449735*G1_4_4;
      A[7] = -0.0476190476190475*G0_0_0 - 0.0476190476190475*G0_2_2 + 0.114285714285714*G0_4_0 + 0.114285714285714*G0_4_2 + 0.0412698412698412*G1_0_0 - 0.00634920634920632*G1_0_2 + 0.0126984126984126*G1_0_4 - 0.00634920634920632*G1_2_0 + 0.0412698412698412*G1_2_2 + 0.0126984126984126*G1_2_4 + 0.0126984126984126*G1_4_0 + 0.0126984126984126*G1_4_2 - 0.253968253968253*G1_4_4;
      A[8] = 0.0126984126984127*G0_0_0 - 0.0253968253968253*G0_0_2 + 0.0253968253968254*G0_2_0 + 0.139682539682539*G0_2_2 + 0.0507936507936508*G0_4_0 + 0.152380952380952*G0_4_2 - 0.0211640211640211*G1_0_0 + 0.0169312169312169*G1_0_2 + 0.0169312169312169*G1_0_4 + 0.0169312169312169*G1_2_0 - 0.0973544973544972*G1_2_2 - 0.0846560846560845*G1_2_4 + 0.0169312169312169*G1_4_0 - 0.0846560846560845*G1_4_2 - 0.135449735449735*G1_4_4;
      A[9] = 0.0;
      A[10] = 0.0;
      A[11] = 0.0;
      A[12] = 0.0;
      A[13] = 0.0;
      A[14] = 0.0;
        break;
      }
    case 2:
      {
        A[0] = 0.0658730158730157*G0_0_0 + 0.00396825396825396*G0_0_1 - 0.00396825396825396*G0_1_0 - 0.00396825396825397*G0_1_1 + 0.0158730158730158*G0_5_0 - 0.0589947089947089*G1_0_0 + 0.0029100529100529*G1_0_1 - 0.0137566137566137*G1_0_5 + 0.0029100529100529*G1_1_0 + 0.00291005291005291*G1_1_1 + 0.00211640211640211*G1_1_5 - 0.0137566137566137*G1_5_0 + 0.00211640211640211*G1_5_1 - 0.00423280423280422*G1_5_5;
      A[1] = -0.00396825396825397*G0_0_0 - 0.00396825396825396*G0_0_1 + 0.00396825396825396*G0_1_0 + 0.0658730158730157*G0_1_1 + 0.0158730158730158*G0_5_1 + 0.00291005291005291*G1_0_0 + 0.0029100529100529*G1_0_1 + 0.00211640211640212*G1_0_5 + 0.0029100529100529*G1_1_0 - 0.0589947089947088*G1_1_1 - 0.0137566137566137*G1_1_5 + 0.00211640211640212*G1_5_0 - 0.0137566137566137*G1_5_1 - 0.00423280423280417*G1_5_5;
      A[2] = 0.0;
      A[3] = 0.0;
      A[4] = 0.0;
      A[5] = 0.0;
      A[6] = 0.0;
      A[7] = 0.0;
      A[8] = 0.0;
      A[9] = 0.139682539682539*G0_0_0 + 0.0253968253968253*G0_0_1 - 0.0253968253968253*G0_1_0 + 0.0126984126984127*G0_1_1 + 0.152380952380952*G0_5_0 + 0.0507936507936507*G0_5_1 - 0.0973544973544972*G1_0_0 + 0.0169312169312169*G1_0_1 - 0.0846560846560845*G1_0_5 + 0.0169312169312169*G1_1_0 - 0.0211640211640211*G1_1_1 + 0.0169312169312169*G1_1_5 - 0.0846560846560845*G1_5_0 + 0.0169312169312169*G1_5_1 - 0.135449735449735*G1_5_5;
      A[10] = -0.0476190476190475*G0_0_0 - 0.0476190476190475*G0_1_1 + 0.114285714285714*G0_5_0 + 0.114285714285714*G0_5_1 + 0.0412698412698412*G1_0_0 - 0.00634920634920633*G1_0_1 + 0.0126984126984127*G1_0_5 - 0.00634920634920633*G1_1_0 + 0.0412698412698411*G1_1_1 + 0.0126984126984126*G1_1_5 + 0.0126984126984126*G1_5_0 + 0.0126984126984126*G1_5_1 - 0.253968253968254*G1_5_5;
      A[11] = 0.0126984126984127*G0_0_0 - 0.0253968253968253*G0_0_1 + 0.0253968253968253*G0_1_0 + 0.139682539682539*G0_1_1 + 0.0507936507936507*G0_5_0 + 0.152380952380952*G0_5_1 - 0.0211640211640211*G1_0_0 + 0.0169312169312169*G1_0_1 + 0.0169312169312169*G1_0_5 + 0.0169312169312169*G1_1_0 - 0.0973544973544971*G1_1_1 - 0.0846560846560845*G1_1_5 + 0.0169312169312169*G1_5_0 - 0.0846560846560845*G1_5_1 - 0.135449735449735*G1_5_5;
      A[12] = 0.0;
      A[13] = 0.0;
      A[14] = 0.0;
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class auxforms_exterior_facet_integral_3_2: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  auxforms_exterior_facet_integral_3_2() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_exterior_facet_integral_3_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      10
    // Number of operations (multiply-add pairs) for geometry tensor:    58
    // Number of operations (multiply-add pairs) for tensor contraction: 292
    // Total number of operations (multiply-add pairs):                  360
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet][0];
    const unsigned int v1 = edge_vertices[facet][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = vertex_coordinates[2*v1 + 0] - vertex_coordinates[2*v0 + 0];
    const double dx1 = vertex_coordinates[2*v1 + 1] - vertex_coordinates[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[2][0]*w[0][0]*(1.0);
    const double G0_0_1 = det*w[2][0]*w[0][1]*(1.0);
    const double G0_0_2 = det*w[2][0]*w[0][2]*(1.0);
    const double G0_1_0 = det*w[2][1]*w[0][0]*(1.0);
    const double G0_1_1 = det*w[2][1]*w[0][1]*(1.0);
    const double G0_1_2 = det*w[2][1]*w[0][2]*(1.0);
    const double G0_2_0 = det*w[2][2]*w[0][0]*(1.0);
    const double G0_2_1 = det*w[2][2]*w[0][1]*(1.0);
    const double G0_2_2 = det*w[2][2]*w[0][2]*(1.0);
    const double G0_3_1 = det*w[2][3]*w[0][1]*(1.0);
    const double G0_3_2 = det*w[2][3]*w[0][2]*(1.0);
    const double G0_4_0 = det*w[2][4]*w[0][0]*(1.0);
    const double G0_4_2 = det*w[2][4]*w[0][2]*(1.0);
    const double G0_5_0 = det*w[2][5]*w[0][0]*(1.0);
    const double G0_5_1 = det*w[2][5]*w[0][1]*(1.0);
    const double G1_0_0 = det*w[2][0]*w[1][0]*(1.0);
    const double G1_0_1 = det*w[2][0]*w[1][1]*(1.0);
    const double G1_0_2 = det*w[2][0]*w[1][2]*(1.0);
    const double G1_0_4 = det*w[2][0]*w[1][4]*(1.0);
    const double G1_0_5 = det*w[2][0]*w[1][5]*(1.0);
    const double G1_1_0 = det*w[2][1]*w[1][0]*(1.0);
    const double G1_1_1 = det*w[2][1]*w[1][1]*(1.0);
    const double G1_1_2 = det*w[2][1]*w[1][2]*(1.0);
    const double G1_1_3 = det*w[2][1]*w[1][3]*(1.0);
    const double G1_1_5 = det*w[2][1]*w[1][5]*(1.0);
    const double G1_2_0 = det*w[2][2]*w[1][0]*(1.0);
    const double G1_2_1 = det*w[2][2]*w[1][1]*(1.0);
    const double G1_2_2 = det*w[2][2]*w[1][2]*(1.0);
    const double G1_2_3 = det*w[2][2]*w[1][3]*(1.0);
    const double G1_2_4 = det*w[2][2]*w[1][4]*(1.0);
    const double G1_3_1 = det*w[2][3]*w[1][1]*(1.0);
    const double G1_3_2 = det*w[2][3]*w[1][2]*(1.0);
    const double G1_3_3 = det*w[2][3]*w[1][3]*(1.0);
    const double G1_4_0 = det*w[2][4]*w[1][0]*(1.0);
    const double G1_4_2 = det*w[2][4]*w[1][2]*(1.0);
    const double G1_4_4 = det*w[2][4]*w[1][4]*(1.0);
    const double G1_5_0 = det*w[2][5]*w[1][0]*(1.0);
    const double G1_5_1 = det*w[2][5]*w[1][1]*(1.0);
    const double G1_5_5 = det*w[2][5]*w[1][5]*(1.0);
    
    // Compute element tensor
    switch (facet)
    {
    case 0:
      {
        A[0] = 0.0;
      A[1] = 0.0438095238095245*G0_1_1 + 0.00166666666666669*G0_1_2 - 0.00166666666666669*G0_2_1 - 0.0016666666666667*G0_2_2 + 0.00666666666666675*G0_3_1 - 0.0407792207792214*G1_1_1 + 0.00136363636363638*G1_1_2 - 0.00606060606060616*G1_1_3 + 0.00136363636363638*G1_2_1 + 0.00136363636363639*G1_2_2 + 0.000606060606060621*G1_2_3 - 0.00606060606060615*G1_3_1 + 0.000606060606060621*G1_3_2 - 0.0012121212121212*G1_3_3;
      A[2] = -0.00166666666666668*G0_1_1 - 0.0016666666666667*G0_1_2 + 0.0016666666666667*G0_2_1 + 0.0438095238095245*G0_2_2 + 0.00666666666666683*G0_3_2 + 0.00136363636363637*G1_1_1 + 0.00136363636363639*G1_1_2 + 0.000606060606060613*G1_1_3 + 0.00136363636363639*G1_2_1 - 0.0407792207792215*G1_2_2 - 0.00606060606060619*G1_2_3 + 0.000606060606060613*G1_3_1 - 0.00606060606060619*G1_3_2 - 0.00121212121212128*G1_3_3;
      A[3] = 0.145714285714288*G0_1_1 + 0.0171428571428574*G0_1_2 - 0.0171428571428574*G0_2_1 + 0.00857142857142875*G0_2_2 + 0.0857142857142871*G0_3_1 + 0.0171428571428574*G0_3_2 - 0.115324675324677*G1_1_1 + 0.0132467532467535*G1_1_2 - 0.0607792207792218*G1_1_3 + 0.0132467532467535*G1_2_1 - 0.0124675324675327*G1_2_2 + 0.0077922077922079*G1_2_3 - 0.0607792207792218*G1_3_1 + 0.0077922077922079*G1_3_2 - 0.0498701298701306*G1_3_3;
      A[4] = -0.0535714285714293*G0_1_1 + 0.0107142857142859*G0_1_2 - 0.0107142857142859*G0_2_1 - 0.0428571428571438*G0_2_2 + 0.0857142857142873*G0_3_1 + 0.0428571428571435*G0_3_2 + 0.0633116883116893*G1_1_1 - 0.000974025974026002*G1_1_2 - 0.0194805194805199*G1_1_3 - 0.000974025974026002*G1_2_1 + 0.0311688311688319*G1_2_2 + 0.0233766233766239*G1_2_3 - 0.0194805194805199*G1_3_1 + 0.0233766233766239*G1_3_2 - 0.132467532467535*G1_3_3;
      A[5] = 0.0666666666666677*G0_1_1 + 0.0666666666666681*G0_2_2 + 0.0952380952380968*G0_3_1 + 0.095238095238097*G0_3_2 - 0.0606060606060615*G1_1_1 + 0.00606060606060619*G1_1_2 - 0.0121212121212123*G1_1_3 + 0.00606060606060619*G1_2_1 - 0.0606060606060619*G1_2_2 - 0.0121212121212125*G1_2_3 - 0.0121212121212123*G1_3_1 - 0.0121212121212125*G1_3_2 - 0.166233766233769*G1_3_3;
      A[6] = -0.0428571428571435*G0_1_1 - 0.0107142857142858*G0_1_2 + 0.0107142857142858*G0_2_1 - 0.05357142857143*G0_2_2 + 0.0428571428571436*G0_3_1 + 0.0857142857142869*G0_3_2 + 0.0311688311688316*G1_1_1 - 0.000974025974026022*G1_1_2 + 0.0233766233766237*G1_1_3 - 0.000974025974026022*G1_2_1 + 0.0633116883116898*G1_2_2 - 0.0194805194805196*G1_2_3 + 0.0233766233766237*G1_3_1 - 0.0194805194805196*G1_3_2 - 0.132467532467535*G1_3_3;
      A[7] = 0.00857142857142871*G0_1_1 - 0.0171428571428575*G0_1_2 + 0.0171428571428575*G0_2_1 + 0.145714285714289*G0_2_2 + 0.0171428571428574*G0_3_1 + 0.0857142857142872*G0_3_2 - 0.0124675324675327*G1_1_1 + 0.0132467532467535*G1_1_2 + 0.00779220779220793*G1_1_3 + 0.0132467532467535*G1_2_1 - 0.115324675324678*G1_2_2 - 0.0607792207792219*G1_2_3 + 0.00779220779220793*G1_3_1 - 0.0607792207792219*G1_3_2 - 0.0498701298701307*G1_3_3;
      A[8] = 0.0;
      A[9] = 0.0;
      A[10] = 0.0;
      A[11] = 0.0;
      A[12] = 0.0;
      A[13] = 0.0;
      A[14] = 0.0;
      A[15] = 0.0;
      A[16] = 0.0;
      A[17] = 0.0;
      A[18] = 0.0;
      A[19] = 0.0;
      A[20] = 0.0;
      A[21] = 0.0;
      A[22] = 0.0;
      A[23] = 0.0;
      A[24] = 0.0;
      A[25] = 0.0;
      A[26] = 0.0;
      A[27] = 0.0;
        break;
      }
    case 1:
      {
        A[0] = 0.0438095238095245*G0_0_0 + 0.00166666666666669*G0_0_2 - 0.00166666666666669*G0_2_0 - 0.0016666666666667*G0_2_2 + 0.00666666666666678*G0_4_0 - 0.0407792207792214*G1_0_0 + 0.00136363636363638*G1_0_2 - 0.00606060606060615*G1_0_4 + 0.00136363636363638*G1_2_0 + 0.00136363636363639*G1_2_2 + 0.000606060606060613*G1_2_4 - 0.00606060606060615*G1_4_0 + 0.000606060606060613*G1_4_2 - 0.00121212121212128*G1_4_4;
      A[1] = 0.0;
      A[2] = -0.00166666666666671*G0_0_0 - 0.0016666666666667*G0_0_2 + 0.0016666666666667*G0_2_0 + 0.0438095238095245*G0_2_2 + 0.00666666666666678*G0_4_2 + 0.0013636363636364*G1_0_0 + 0.00136363636363639*G1_0_2 + 0.000606060606060626*G1_0_4 + 0.00136363636363639*G1_2_0 - 0.0407792207792214*G1_2_2 - 0.00606060606060618*G1_2_4 + 0.000606060606060626*G1_4_0 - 0.00606060606060618*G1_4_2 - 0.00121212121212121*G1_4_4;
      A[3] = 0.0;
      A[4] = 0.0;
      A[5] = 0.0;
      A[6] = 0.0;
      A[7] = 0.0;
      A[8] = 0.145714285714288*G0_0_0 + 0.0171428571428574*G0_0_2 - 0.0171428571428574*G0_2_0 + 0.00857142857142875*G0_2_2 + 0.0857142857142872*G0_4_0 + 0.0171428571428574*G0_4_2 - 0.115324675324677*G1_0_0 + 0.0132467532467535*G1_0_2 - 0.0607792207792218*G1_0_4 + 0.0132467532467535*G1_2_0 - 0.0124675324675327*G1_2_2 + 0.00779220779220791*G1_2_4 - 0.0607792207792218*G1_4_0 + 0.00779220779220791*G1_4_2 - 0.0498701298701307*G1_4_4;
      A[9] = -0.0535714285714293*G0_0_0 + 0.0107142857142859*G0_0_2 - 0.0107142857142859*G0_2_0 - 0.0428571428571438*G0_2_2 + 0.0857142857142872*G0_4_0 + 0.0428571428571435*G0_4_2 + 0.0633116883116893*G1_0_0 - 0.000974025974026007*G1_0_2 - 0.0194805194805199*G1_0_4 - 0.000974025974026007*G1_2_0 + 0.0311688311688319*G1_2_2 + 0.0233766233766239*G1_2_4 - 0.0194805194805199*G1_4_0 + 0.0233766233766239*G1_4_2 - 0.132467532467535*G1_4_4;
      A[10] = 0.0666666666666677*G0_0_0 + 0.0666666666666682*G0_2_2 + 0.0952380952380968*G0_4_0 + 0.0952380952380969*G0_4_2 - 0.0606060606060616*G1_0_0 + 0.00606060606060619*G1_0_2 - 0.0121212121212123*G1_0_4 + 0.00606060606060619*G1_2_0 - 0.0606060606060619*G1_2_2 - 0.0121212121212125*G1_2_4 - 0.0121212121212123*G1_4_0 - 0.0121212121212125*G1_4_2 - 0.166233766233769*G1_4_4;
      A[11] = -0.0428571428571435*G0_0_0 - 0.0107142857142858*G0_0_2 + 0.0107142857142858*G0_2_0 - 0.05357142857143*G0_2_2 + 0.0428571428571436*G0_4_0 + 0.085714285714287*G0_4_2 + 0.0311688311688316*G1_0_0 - 0.000974025974026028*G1_0_2 + 0.0233766233766237*G1_0_4 - 0.000974025974026027*G1_2_0 + 0.0633116883116898*G1_2_2 - 0.0194805194805196*G1_2_4 + 0.0233766233766237*G1_4_0 - 0.0194805194805196*G1_4_2 - 0.132467532467535*G1_4_4;
      A[12] = 0.00857142857142873*G0_0_0 - 0.0171428571428575*G0_0_2 + 0.0171428571428575*G0_2_0 + 0.145714285714289*G0_2_2 + 0.0171428571428575*G0_4_0 + 0.0857142857142874*G0_4_2 - 0.0124675324675327*G1_0_0 + 0.0132467532467535*G1_0_2 + 0.00779220779220791*G1_0_4 + 0.0132467532467535*G1_2_0 - 0.115324675324678*G1_2_2 - 0.060779220779222*G1_2_4 + 0.00779220779220791*G1_4_0 - 0.060779220779222*G1_4_2 - 0.0498701298701309*G1_4_4;
      A[13] = 0.0;
      A[14] = 0.0;
      A[15] = 0.0;
      A[16] = 0.0;
      A[17] = 0.0;
      A[18] = 0.0;
      A[19] = 0.0;
      A[20] = 0.0;
      A[21] = 0.0;
      A[22] = 0.0;
      A[23] = 0.0;
      A[24] = 0.0;
      A[25] = 0.0;
      A[26] = 0.0;
      A[27] = 0.0;
        break;
      }
    case 2:
      {
        A[0] = 0.0438095238095245*G0_0_0 + 0.00166666666666669*G0_0_1 - 0.00166666666666669*G0_1_0 - 0.00166666666666669*G0_1_1 + 0.0066666666666668*G0_5_0 - 0.0407792207792214*G1_0_0 + 0.00136363636363638*G1_0_1 - 0.00606060606060615*G1_0_5 + 0.00136363636363638*G1_1_0 + 0.00136363636363639*G1_1_1 + 0.00060606060606061*G1_1_5 - 0.00606060606060615*G1_5_0 + 0.00060606060606061*G1_5_1 - 0.0012121212121213*G1_5_5;
      A[1] = -0.00166666666666671*G0_0_0 - 0.0016666666666667*G0_0_1 + 0.0016666666666667*G0_1_0 + 0.0438095238095246*G0_1_1 + 0.0066666666666668*G0_5_1 + 0.00136363636363639*G1_0_0 + 0.00136363636363639*G1_0_1 + 0.000606060606060625*G1_0_5 + 0.00136363636363639*G1_1_0 - 0.0407792207792215*G1_1_1 - 0.00606060606060619*G1_1_5 + 0.000606060606060625*G1_5_0 - 0.00606060606060619*G1_5_1 - 0.00121212121212124*G1_5_5;
      A[2] = 0.0;
      A[3] = 0.0;
      A[4] = 0.0;
      A[5] = 0.0;
      A[6] = 0.0;
      A[7] = 0.0;
      A[8] = 0.0;
      A[9] = 0.0;
      A[10] = 0.0;
      A[11] = 0.0;
      A[12] = 0.0;
      A[13] = 0.145714285714288*G0_0_0 + 0.0171428571428574*G0_0_1 - 0.0171428571428574*G0_1_0 + 0.00857142857142875*G0_1_1 + 0.0857142857142871*G0_5_0 + 0.0171428571428574*G0_5_1 - 0.115324675324677*G1_0_0 + 0.0132467532467535*G1_0_1 - 0.0607792207792218*G1_0_5 + 0.0132467532467535*G1_1_0 - 0.0124675324675327*G1_1_1 + 0.0077922077922079*G1_1_5 - 0.0607792207792218*G1_5_0 + 0.0077922077922079*G1_5_1 - 0.0498701298701306*G1_5_5;
      A[14] = -0.0535714285714292*G0_0_0 + 0.0107142857142859*G0_0_1 - 0.0107142857142859*G0_1_0 - 0.0428571428571438*G0_1_1 + 0.0857142857142873*G0_5_0 + 0.0428571428571435*G0_5_1 + 0.0633116883116891*G1_0_0 - 0.000974025974025986*G1_0_1 - 0.0194805194805199*G1_0_5 - 0.000974025974025985*G1_1_0 + 0.0311688311688318*G1_1_1 + 0.0233766233766239*G1_1_5 - 0.0194805194805199*G1_5_0 + 0.0233766233766239*G1_5_1 - 0.132467532467535*G1_5_5;
      A[15] = 0.0666666666666676*G0_0_0 + 0.0666666666666681*G0_1_1 + 0.0952380952380968*G0_5_0 + 0.095238095238097*G0_5_1 - 0.0606060606060615*G1_0_0 + 0.00606060606060618*G1_0_1 - 0.0121212121212123*G1_0_5 + 0.00606060606060618*G1_1_0 - 0.0606060606060619*G1_1_1 - 0.0121212121212125*G1_1_5 - 0.0121212121212123*G1_5_0 - 0.0121212121212125*G1_5_1 - 0.166233766233769*G1_5_5;
      A[16] = -0.0428571428571434*G0_0_0 - 0.0107142857142858*G0_0_1 + 0.0107142857142858*G0_1_0 - 0.0535714285714299*G0_1_1 + 0.0428571428571436*G0_5_0 + 0.0857142857142869*G0_5_1 + 0.0311688311688316*G1_0_0 - 0.000974025974026015*G1_0_1 + 0.0233766233766237*G1_0_5 - 0.000974025974026016*G1_1_0 + 0.0633116883116897*G1_1_1 - 0.0194805194805196*G1_1_5 + 0.0233766233766237*G1_5_0 - 0.0194805194805196*G1_5_1 - 0.132467532467535*G1_5_5;
      A[17] = 0.00857142857142867*G0_0_0 - 0.0171428571428575*G0_0_1 + 0.0171428571428575*G0_1_0 + 0.145714285714289*G0_1_1 + 0.0171428571428575*G0_5_0 + 0.0857142857142874*G0_5_1 - 0.0124675324675326*G1_0_0 + 0.0132467532467535*G1_0_1 + 0.00779220779220795*G1_0_5 + 0.0132467532467535*G1_1_0 - 0.115324675324678*G1_1_1 - 0.0607792207792219*G1_1_5 + 0.00779220779220795*G1_5_0 - 0.0607792207792219*G1_5_1 - 0.0498701298701308*G1_5_5;
      A[18] = 0.0;
      A[19] = 0.0;
      A[20] = 0.0;
      A[21] = 0.0;
      A[22] = 0.0;
      A[23] = 0.0;
      A[24] = 0.0;
      A[25] = 0.0;
      A[26] = 0.0;
      A[27] = 0.0;
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class auxforms_cell_integral_4_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  auxforms_cell_integral_4_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_cell_integral_4_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    12
    // Number of operations (multiply-add pairs) for tensor contraction: 42
    // Total number of operations (multiply-add pairs):                  57
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0 = det*w[0][0]*(1.0);
    const double G0_1 = det*w[0][1]*(1.0);
    const double G0_2 = det*w[0][2]*(1.0);
    const double G0_3 = det*w[0][3]*(1.0);
    const double G0_4 = det*w[0][4]*(1.0);
    const double G0_5 = det*w[0][5]*(1.0);
    const double G0_6 = det*w[0][6]*(1.0);
    const double G0_7 = det*w[0][7]*(1.0);
    const double G0_8 = det*w[0][8]*(1.0);
    const double G0_9 = det*w[0][9]*(1.0);
    const double G0_10 = det*w[0][10]*(1.0);
    const double G0_11 = det*w[0][11]*(1.0);
    
    // Compute element tensor
    A[0] = 0.0166666666666666*G0_0 - 0.00277777777777778*G0_1 - 0.00277777777777778*G0_2 - 0.0111111111111111*G0_3;
    A[1] = -0.00277777777777778*G0_0 + 0.0166666666666667*G0_1 - 0.00277777777777781*G0_2 - 0.0111111111111111*G0_4;
    A[2] = -0.00277777777777778*G0_0 - 0.0027777777777778*G0_1 + 0.0166666666666667*G0_2 - 0.0111111111111111*G0_5;
    A[3] = -0.0111111111111111*G0_0 + 0.0888888888888888*G0_3 + 0.0444444444444443*G0_4 + 0.0444444444444443*G0_5;
    A[4] = -0.0111111111111111*G0_1 + 0.0444444444444443*G0_3 + 0.0888888888888887*G0_4 + 0.0444444444444443*G0_5;
    A[5] = -0.0111111111111111*G0_2 + 0.0444444444444443*G0_3 + 0.0444444444444443*G0_4 + 0.0888888888888887*G0_5;
    A[6] = 0.0166666666666666*G0_6 - 0.00277777777777778*G0_7 - 0.00277777777777778*G0_8 - 0.0111111111111111*G0_9;
    A[7] = -0.00277777777777778*G0_6 + 0.0166666666666667*G0_7 - 0.00277777777777781*G0_8 - 0.0111111111111111*G0_10;
    A[8] = -0.00277777777777778*G0_6 - 0.0027777777777778*G0_7 + 0.0166666666666667*G0_8 - 0.0111111111111111*G0_11;
    A[9] = -0.0111111111111111*G0_6 + 0.0888888888888888*G0_9 + 0.0444444444444443*G0_10 + 0.0444444444444443*G0_11;
    A[10] = -0.0111111111111111*G0_7 + 0.0444444444444443*G0_9 + 0.0888888888888887*G0_10 + 0.0444444444444443*G0_11;
    A[11] = -0.0111111111111111*G0_8 + 0.0444444444444443*G0_9 + 0.0444444444444443*G0_10 + 0.0888888888888887*G0_11;
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class auxforms_cell_integral_5_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  auxforms_cell_integral_5_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_cell_integral_5_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    108
    // Number of operations (multiply-add pairs) for tensor contraction: 214
    // Total number of operations (multiply-add pairs):                  325
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[0][0]*w[0][0]*(1.0);
    const double G0_0_1 = det*w[0][0]*w[0][1]*(1.0);
    const double G0_0_2 = det*w[0][0]*w[0][2]*(1.0);
    const double G0_0_3 = det*w[0][0]*w[0][3]*(1.0);
    const double G0_0_4 = det*w[0][0]*w[0][4]*(1.0);
    const double G0_0_5 = det*w[0][0]*w[0][5]*(1.0);
    const double G0_1_0 = det*w[0][1]*w[0][0]*(1.0);
    const double G0_1_1 = det*w[0][1]*w[0][1]*(1.0);
    const double G0_1_2 = det*w[0][1]*w[0][2]*(1.0);
    const double G0_1_3 = det*w[0][1]*w[0][3]*(1.0);
    const double G0_1_4 = det*w[0][1]*w[0][4]*(1.0);
    const double G0_1_5 = det*w[0][1]*w[0][5]*(1.0);
    const double G0_2_0 = det*w[0][2]*w[0][0]*(1.0);
    const double G0_2_1 = det*w[0][2]*w[0][1]*(1.0);
    const double G0_2_2 = det*w[0][2]*w[0][2]*(1.0);
    const double G0_2_3 = det*w[0][2]*w[0][3]*(1.0);
    const double G0_2_4 = det*w[0][2]*w[0][4]*(1.0);
    const double G0_2_5 = det*w[0][2]*w[0][5]*(1.0);
    const double G0_3_0 = det*w[0][3]*w[0][0]*(1.0);
    const double G0_3_1 = det*w[0][3]*w[0][1]*(1.0);
    const double G0_3_2 = det*w[0][3]*w[0][2]*(1.0);
    const double G0_3_3 = det*w[0][3]*w[0][3]*(1.0);
    const double G0_3_4 = det*w[0][3]*w[0][4]*(1.0);
    const double G0_3_5 = det*w[0][3]*w[0][5]*(1.0);
    const double G0_4_0 = det*w[0][4]*w[0][0]*(1.0);
    const double G0_4_1 = det*w[0][4]*w[0][1]*(1.0);
    const double G0_4_2 = det*w[0][4]*w[0][2]*(1.0);
    const double G0_4_3 = det*w[0][4]*w[0][3]*(1.0);
    const double G0_4_4 = det*w[0][4]*w[0][4]*(1.0);
    const double G0_4_5 = det*w[0][4]*w[0][5]*(1.0);
    const double G0_5_0 = det*w[0][5]*w[0][0]*(1.0);
    const double G0_5_1 = det*w[0][5]*w[0][1]*(1.0);
    const double G0_5_2 = det*w[0][5]*w[0][2]*(1.0);
    const double G0_5_3 = det*w[0][5]*w[0][3]*(1.0);
    const double G0_5_4 = det*w[0][5]*w[0][4]*(1.0);
    const double G0_5_5 = det*w[0][5]*w[0][5]*(1.0);
    const double G0_6_6 = det*w[0][6]*w[0][6]*(1.0);
    const double G0_6_7 = det*w[0][6]*w[0][7]*(1.0);
    const double G0_6_8 = det*w[0][6]*w[0][8]*(1.0);
    const double G0_6_9 = det*w[0][6]*w[0][9]*(1.0);
    const double G0_6_10 = det*w[0][6]*w[0][10]*(1.0);
    const double G0_6_11 = det*w[0][6]*w[0][11]*(1.0);
    const double G0_7_6 = det*w[0][7]*w[0][6]*(1.0);
    const double G0_7_7 = det*w[0][7]*w[0][7]*(1.0);
    const double G0_7_8 = det*w[0][7]*w[0][8]*(1.0);
    const double G0_7_9 = det*w[0][7]*w[0][9]*(1.0);
    const double G0_7_10 = det*w[0][7]*w[0][10]*(1.0);
    const double G0_7_11 = det*w[0][7]*w[0][11]*(1.0);
    const double G0_8_6 = det*w[0][8]*w[0][6]*(1.0);
    const double G0_8_7 = det*w[0][8]*w[0][7]*(1.0);
    const double G0_8_8 = det*w[0][8]*w[0][8]*(1.0);
    const double G0_8_9 = det*w[0][8]*w[0][9]*(1.0);
    const double G0_8_10 = det*w[0][8]*w[0][10]*(1.0);
    const double G0_8_11 = det*w[0][8]*w[0][11]*(1.0);
    const double G0_9_6 = det*w[0][9]*w[0][6]*(1.0);
    const double G0_9_7 = det*w[0][9]*w[0][7]*(1.0);
    const double G0_9_8 = det*w[0][9]*w[0][8]*(1.0);
    const double G0_9_9 = det*w[0][9]*w[0][9]*(1.0);
    const double G0_9_10 = det*w[0][9]*w[0][10]*(1.0);
    const double G0_9_11 = det*w[0][9]*w[0][11]*(1.0);
    const double G0_10_6 = det*w[0][10]*w[0][6]*(1.0);
    const double G0_10_7 = det*w[0][10]*w[0][7]*(1.0);
    const double G0_10_8 = det*w[0][10]*w[0][8]*(1.0);
    const double G0_10_9 = det*w[0][10]*w[0][9]*(1.0);
    const double G0_10_10 = det*w[0][10]*w[0][10]*(1.0);
    const double G0_10_11 = det*w[0][10]*w[0][11]*(1.0);
    const double G0_11_6 = det*w[0][11]*w[0][6]*(1.0);
    const double G0_11_7 = det*w[0][11]*w[0][7]*(1.0);
    const double G0_11_8 = det*w[0][11]*w[0][8]*(1.0);
    const double G0_11_9 = det*w[0][11]*w[0][9]*(1.0);
    const double G0_11_10 = det*w[0][11]*w[0][10]*(1.0);
    const double G0_11_11 = det*w[0][11]*w[0][11]*(1.0);
    
    // Compute element tensor
    A[0] = 0.0119047619047619*G0_0_0 - 0.00158730158730159*G0_0_1 - 0.00158730158730159*G0_0_2 - 0.00158730158730159*G0_0_3 + 0.00476190476190477*G0_0_4 + 0.00476190476190477*G0_0_5 - 0.00158730158730159*G0_1_0 + 0.00238095238095238*G0_1_1 + 0.000396825396825396*G0_1_2 - 0.00158730158730159*G0_1_3 - 0.00476190476190476*G0_1_4 - 0.00317460317460317*G0_1_5 - 0.00158730158730159*G0_2_0 + 0.000396825396825396*G0_2_1 + 0.00238095238095238*G0_2_2 - 0.00158730158730158*G0_2_3 - 0.00317460317460317*G0_2_4 - 0.00476190476190476*G0_2_5 - 0.00158730158730159*G0_3_0 - 0.00158730158730159*G0_3_1 - 0.00158730158730158*G0_3_2 + 0.0126984126984127*G0_3_3 + 0.0126984126984127*G0_3_4 + 0.0126984126984127*G0_3_5 + 0.00476190476190477*G0_4_0 - 0.00476190476190476*G0_4_1 - 0.00317460317460317*G0_4_2 + 0.0126984126984127*G0_4_3 + 0.0380952380952381*G0_4_4 + 0.019047619047619*G0_4_5 + 0.00476190476190476*G0_5_0 - 0.00317460317460317*G0_5_1 - 0.00476190476190476*G0_5_2 + 0.0126984126984127*G0_5_3 + 0.019047619047619*G0_5_4 + 0.0380952380952381*G0_5_5 + 0.0119047619047619*G0_6_6 - 0.00158730158730159*G0_6_7 - 0.00158730158730159*G0_6_8 - 0.00158730158730159*G0_6_9 + 0.00476190476190477*G0_6_10 + 0.00476190476190477*G0_6_11 - 0.00158730158730159*G0_7_6 + 0.00238095238095238*G0_7_7 + 0.000396825396825396*G0_7_8 - 0.00158730158730159*G0_7_9 - 0.00476190476190476*G0_7_10 - 0.00317460317460317*G0_7_11 - 0.00158730158730159*G0_8_6 + 0.000396825396825396*G0_8_7 + 0.00238095238095238*G0_8_8 - 0.00158730158730158*G0_8_9 - 0.00317460317460317*G0_8_10 - 0.00476190476190476*G0_8_11 - 0.00158730158730159*G0_9_6 - 0.00158730158730159*G0_9_7 - 0.00158730158730158*G0_9_8 + 0.0126984126984127*G0_9_9 + 0.0126984126984127*G0_9_10 + 0.0126984126984127*G0_9_11 + 0.00476190476190477*G0_10_6 - 0.00476190476190476*G0_10_7 - 0.00317460317460317*G0_10_8 + 0.0126984126984127*G0_10_9 + 0.0380952380952381*G0_10_10 + 0.019047619047619*G0_10_11 + 0.00476190476190476*G0_11_6 - 0.00317460317460317*G0_11_7 - 0.00476190476190476*G0_11_8 + 0.0126984126984127*G0_11_9 + 0.019047619047619*G0_11_10 + 0.0380952380952381*G0_11_11;
    A[1] = 0.00238095238095238*G0_0_0 - 0.00158730158730159*G0_0_1 + 0.000396825396825396*G0_0_2 - 0.00476190476190476*G0_0_3 - 0.00158730158730159*G0_0_4 - 0.00317460317460317*G0_0_5 - 0.00158730158730159*G0_1_0 + 0.0119047619047619*G0_1_1 - 0.00158730158730158*G0_1_2 + 0.00476190476190475*G0_1_3 - 0.00158730158730159*G0_1_4 + 0.00476190476190476*G0_1_5 + 0.000396825396825396*G0_2_0 - 0.00158730158730159*G0_2_1 + 0.00238095238095238*G0_2_2 - 0.00317460317460317*G0_2_3 - 0.00158730158730158*G0_2_4 - 0.00476190476190476*G0_2_5 - 0.00476190476190476*G0_3_0 + 0.00476190476190475*G0_3_1 - 0.00317460317460317*G0_3_2 + 0.0380952380952381*G0_3_3 + 0.0126984126984127*G0_3_4 + 0.019047619047619*G0_3_5 - 0.00158730158730159*G0_4_0 - 0.00158730158730159*G0_4_1 - 0.00158730158730158*G0_4_2 + 0.0126984126984127*G0_4_3 + 0.0126984126984127*G0_4_4 + 0.0126984126984127*G0_4_5 - 0.00317460317460317*G0_5_0 + 0.00476190476190476*G0_5_1 - 0.00476190476190476*G0_5_2 + 0.019047619047619*G0_5_3 + 0.0126984126984127*G0_5_4 + 0.0380952380952381*G0_5_5 + 0.00238095238095238*G0_6_6 - 0.00158730158730159*G0_6_7 + 0.000396825396825396*G0_6_8 - 0.00476190476190476*G0_6_9 - 0.00158730158730159*G0_6_10 - 0.00317460317460317*G0_6_11 - 0.00158730158730159*G0_7_6 + 0.0119047619047619*G0_7_7 - 0.00158730158730158*G0_7_8 + 0.00476190476190475*G0_7_9 - 0.00158730158730159*G0_7_10 + 0.00476190476190476*G0_7_11 + 0.000396825396825396*G0_8_6 - 0.00158730158730159*G0_8_7 + 0.00238095238095238*G0_8_8 - 0.00317460317460317*G0_8_9 - 0.00158730158730158*G0_8_10 - 0.00476190476190476*G0_8_11 - 0.00476190476190476*G0_9_6 + 0.00476190476190475*G0_9_7 - 0.00317460317460317*G0_9_8 + 0.0380952380952381*G0_9_9 + 0.0126984126984127*G0_9_10 + 0.019047619047619*G0_9_11 - 0.00158730158730159*G0_10_6 - 0.00158730158730159*G0_10_7 - 0.00158730158730158*G0_10_8 + 0.0126984126984127*G0_10_9 + 0.0126984126984127*G0_10_10 + 0.0126984126984127*G0_10_11 - 0.00317460317460317*G0_11_6 + 0.00476190476190476*G0_11_7 - 0.00476190476190476*G0_11_8 + 0.019047619047619*G0_11_9 + 0.0126984126984127*G0_11_10 + 0.0380952380952381*G0_11_11;
    A[2] = 0.00238095238095238*G0_0_0 + 0.000396825396825397*G0_0_1 - 0.00158730158730159*G0_0_2 - 0.00476190476190476*G0_0_3 - 0.00317460317460317*G0_0_4 - 0.00158730158730159*G0_0_5 + 0.000396825396825397*G0_1_0 + 0.00238095238095238*G0_1_1 - 0.00158730158730159*G0_1_2 - 0.00317460317460318*G0_1_3 - 0.00476190476190476*G0_1_4 - 0.00158730158730159*G0_1_5 - 0.00158730158730159*G0_2_0 - 0.00158730158730159*G0_2_1 + 0.0119047619047619*G0_2_2 + 0.00476190476190476*G0_2_3 + 0.00476190476190476*G0_2_4 - 0.00158730158730159*G0_2_5 - 0.00476190476190476*G0_3_0 - 0.00317460317460318*G0_3_1 + 0.00476190476190476*G0_3_2 + 0.0380952380952381*G0_3_3 + 0.019047619047619*G0_3_4 + 0.0126984126984127*G0_3_5 - 0.00317460317460317*G0_4_0 - 0.00476190476190476*G0_4_1 + 0.00476190476190476*G0_4_2 + 0.019047619047619*G0_4_3 + 0.0380952380952381*G0_4_4 + 0.0126984126984127*G0_4_5 - 0.00158730158730159*G0_5_0 - 0.00158730158730159*G0_5_1 - 0.00158730158730158*G0_5_2 + 0.0126984126984127*G0_5_3 + 0.0126984126984127*G0_5_4 + 0.0126984126984127*G0_5_5 + 0.00238095238095238*G0_6_6 + 0.000396825396825397*G0_6_7 - 0.00158730158730159*G0_6_8 - 0.00476190476190476*G0_6_9 - 0.00317460317460317*G0_6_10 - 0.00158730158730159*G0_6_11 + 0.000396825396825397*G0_7_6 + 0.00238095238095238*G0_7_7 - 0.00158730158730159*G0_7_8 - 0.00317460317460318*G0_7_9 - 0.00476190476190476*G0_7_10 - 0.00158730158730159*G0_7_11 - 0.00158730158730159*G0_8_6 - 0.00158730158730159*G0_8_7 + 0.0119047619047619*G0_8_8 + 0.00476190476190476*G0_8_9 + 0.00476190476190476*G0_8_10 - 0.00158730158730159*G0_8_11 - 0.00476190476190476*G0_9_6 - 0.00317460317460318*G0_9_7 + 0.00476190476190476*G0_9_8 + 0.0380952380952381*G0_9_9 + 0.019047619047619*G0_9_10 + 0.0126984126984127*G0_9_11 - 0.00317460317460317*G0_10_6 - 0.00476190476190476*G0_10_7 + 0.00476190476190476*G0_10_8 + 0.019047619047619*G0_10_9 + 0.0380952380952381*G0_10_10 + 0.0126984126984127*G0_10_11 - 0.00158730158730159*G0_11_6 - 0.00158730158730159*G0_11_7 - 0.00158730158730158*G0_11_8 + 0.0126984126984127*G0_11_9 + 0.0126984126984127*G0_11_10 + 0.0126984126984127*G0_11_11;
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class auxforms_cell_integral_6_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  auxforms_cell_integral_6_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_cell_integral_6_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    108
    // Number of operations (multiply-add pairs) for tensor contraction: 285
    // Total number of operations (multiply-add pairs):                  396
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[0][0]*w[0][0]*(1.0);
    const double G0_0_1 = det*w[0][0]*w[0][1]*(1.0);
    const double G0_0_2 = det*w[0][0]*w[0][2]*(1.0);
    const double G0_0_3 = det*w[0][0]*w[0][3]*(1.0);
    const double G0_0_4 = det*w[0][0]*w[0][4]*(1.0);
    const double G0_0_5 = det*w[0][0]*w[0][5]*(1.0);
    const double G0_1_0 = det*w[0][1]*w[0][0]*(1.0);
    const double G0_1_1 = det*w[0][1]*w[0][1]*(1.0);
    const double G0_1_2 = det*w[0][1]*w[0][2]*(1.0);
    const double G0_1_3 = det*w[0][1]*w[0][3]*(1.0);
    const double G0_1_4 = det*w[0][1]*w[0][4]*(1.0);
    const double G0_1_5 = det*w[0][1]*w[0][5]*(1.0);
    const double G0_2_0 = det*w[0][2]*w[0][0]*(1.0);
    const double G0_2_1 = det*w[0][2]*w[0][1]*(1.0);
    const double G0_2_2 = det*w[0][2]*w[0][2]*(1.0);
    const double G0_2_3 = det*w[0][2]*w[0][3]*(1.0);
    const double G0_2_4 = det*w[0][2]*w[0][4]*(1.0);
    const double G0_2_5 = det*w[0][2]*w[0][5]*(1.0);
    const double G0_3_0 = det*w[0][3]*w[0][0]*(1.0);
    const double G0_3_1 = det*w[0][3]*w[0][1]*(1.0);
    const double G0_3_2 = det*w[0][3]*w[0][2]*(1.0);
    const double G0_3_3 = det*w[0][3]*w[0][3]*(1.0);
    const double G0_3_4 = det*w[0][3]*w[0][4]*(1.0);
    const double G0_3_5 = det*w[0][3]*w[0][5]*(1.0);
    const double G0_4_0 = det*w[0][4]*w[0][0]*(1.0);
    const double G0_4_1 = det*w[0][4]*w[0][1]*(1.0);
    const double G0_4_2 = det*w[0][4]*w[0][2]*(1.0);
    const double G0_4_3 = det*w[0][4]*w[0][3]*(1.0);
    const double G0_4_4 = det*w[0][4]*w[0][4]*(1.0);
    const double G0_4_5 = det*w[0][4]*w[0][5]*(1.0);
    const double G0_5_0 = det*w[0][5]*w[0][0]*(1.0);
    const double G0_5_1 = det*w[0][5]*w[0][1]*(1.0);
    const double G0_5_2 = det*w[0][5]*w[0][2]*(1.0);
    const double G0_5_3 = det*w[0][5]*w[0][3]*(1.0);
    const double G0_5_4 = det*w[0][5]*w[0][4]*(1.0);
    const double G0_5_5 = det*w[0][5]*w[0][5]*(1.0);
    const double G0_6_6 = det*w[0][6]*w[0][6]*(1.0);
    const double G0_6_7 = det*w[0][6]*w[0][7]*(1.0);
    const double G0_6_8 = det*w[0][6]*w[0][8]*(1.0);
    const double G0_6_9 = det*w[0][6]*w[0][9]*(1.0);
    const double G0_6_10 = det*w[0][6]*w[0][10]*(1.0);
    const double G0_6_11 = det*w[0][6]*w[0][11]*(1.0);
    const double G0_7_6 = det*w[0][7]*w[0][6]*(1.0);
    const double G0_7_7 = det*w[0][7]*w[0][7]*(1.0);
    const double G0_7_8 = det*w[0][7]*w[0][8]*(1.0);
    const double G0_7_9 = det*w[0][7]*w[0][9]*(1.0);
    const double G0_7_10 = det*w[0][7]*w[0][10]*(1.0);
    const double G0_7_11 = det*w[0][7]*w[0][11]*(1.0);
    const double G0_8_6 = det*w[0][8]*w[0][6]*(1.0);
    const double G0_8_7 = det*w[0][8]*w[0][7]*(1.0);
    const double G0_8_8 = det*w[0][8]*w[0][8]*(1.0);
    const double G0_8_9 = det*w[0][8]*w[0][9]*(1.0);
    const double G0_8_10 = det*w[0][8]*w[0][10]*(1.0);
    const double G0_8_11 = det*w[0][8]*w[0][11]*(1.0);
    const double G0_9_6 = det*w[0][9]*w[0][6]*(1.0);
    const double G0_9_7 = det*w[0][9]*w[0][7]*(1.0);
    const double G0_9_8 = det*w[0][9]*w[0][8]*(1.0);
    const double G0_9_9 = det*w[0][9]*w[0][9]*(1.0);
    const double G0_9_10 = det*w[0][9]*w[0][10]*(1.0);
    const double G0_9_11 = det*w[0][9]*w[0][11]*(1.0);
    const double G0_10_6 = det*w[0][10]*w[0][6]*(1.0);
    const double G0_10_7 = det*w[0][10]*w[0][7]*(1.0);
    const double G0_10_8 = det*w[0][10]*w[0][8]*(1.0);
    const double G0_10_9 = det*w[0][10]*w[0][9]*(1.0);
    const double G0_10_10 = det*w[0][10]*w[0][10]*(1.0);
    const double G0_10_11 = det*w[0][10]*w[0][11]*(1.0);
    const double G0_11_6 = det*w[0][11]*w[0][6]*(1.0);
    const double G0_11_7 = det*w[0][11]*w[0][7]*(1.0);
    const double G0_11_8 = det*w[0][11]*w[0][8]*(1.0);
    const double G0_11_9 = det*w[0][11]*w[0][9]*(1.0);
    const double G0_11_10 = det*w[0][11]*w[0][10]*(1.0);
    const double G0_11_11 = det*w[0][11]*w[0][11]*(1.0);
    
    // Compute element tensor
    A[0] = 0.00714285714285721*G0_0_0 - 0.000793650793650796*G0_0_1 - 0.000793650793650796*G0_0_2 + 0.00158730158730157*G0_0_3 + 0.00476190476190478*G0_0_4 + 0.00476190476190478*G0_0_5 - 0.000793650793650796*G0_1_0 - 0.000793650793650795*G0_1_1 + 0.000396825396825395*G0_1_2 - 0.0015873015873016*G0_1_5 - 0.000793650793650796*G0_2_0 + 0.000396825396825395*G0_2_1 - 0.000793650793650795*G0_2_2 - 0.0015873015873016*G0_2_4 + 0.00158730158730157*G0_3_0 - 0.0063492063492063*G0_3_3 - 0.00317460317460314*G0_3_4 - 0.00317460317460314*G0_3_5 + 0.00476190476190478*G0_4_0 - 0.0015873015873016*G0_4_2 - 0.00317460317460314*G0_4_3 + 0.00476190476190478*G0_5_0 - 0.0015873015873016*G0_5_1 - 0.00317460317460314*G0_5_3 + 0.00714285714285721*G0_6_6 - 0.000793650793650796*G0_6_7 - 0.000793650793650796*G0_6_8 + 0.00158730158730157*G0_6_9 + 0.00476190476190478*G0_6_10 + 0.00476190476190478*G0_6_11 - 0.000793650793650796*G0_7_6 - 0.000793650793650795*G0_7_7 + 0.000396825396825395*G0_7_8 - 0.0015873015873016*G0_7_11 - 0.000793650793650796*G0_8_6 + 0.000396825396825395*G0_8_7 - 0.000793650793650795*G0_8_8 - 0.0015873015873016*G0_8_10 + 0.00158730158730157*G0_9_6 - 0.0063492063492063*G0_9_9 - 0.00317460317460314*G0_9_10 - 0.00317460317460314*G0_9_11 + 0.00476190476190478*G0_10_6 - 0.0015873015873016*G0_10_8 - 0.00317460317460314*G0_10_9 + 0.00476190476190478*G0_11_6 - 0.0015873015873016*G0_11_7 - 0.00317460317460314*G0_11_9;
    A[1] = -0.000793650793650796*G0_0_0 - 0.000793650793650795*G0_0_1 + 0.000396825396825395*G0_0_2 - 0.0015873015873016*G0_0_5 - 0.000793650793650795*G0_1_0 + 0.00714285714285721*G0_1_1 - 0.000793650793650796*G0_1_2 + 0.00476190476190478*G0_1_3 + 0.00158730158730158*G0_1_4 + 0.00476190476190478*G0_1_5 + 0.000396825396825395*G0_2_0 - 0.000793650793650796*G0_2_1 - 0.000793650793650796*G0_2_2 - 0.0015873015873016*G0_2_3 + 0.00476190476190478*G0_3_1 - 0.0015873015873016*G0_3_2 - 0.00317460317460315*G0_3_4 + 0.00158730158730158*G0_4_1 - 0.00317460317460315*G0_4_3 - 0.00634920634920632*G0_4_4 - 0.00317460317460316*G0_4_5 - 0.0015873015873016*G0_5_0 + 0.00476190476190478*G0_5_1 - 0.00317460317460316*G0_5_4 - 0.000793650793650796*G0_6_6 - 0.000793650793650795*G0_6_7 + 0.000396825396825395*G0_6_8 - 0.0015873015873016*G0_6_11 - 0.000793650793650795*G0_7_6 + 0.00714285714285721*G0_7_7 - 0.000793650793650796*G0_7_8 + 0.00476190476190478*G0_7_9 + 0.00158730158730158*G0_7_10 + 0.00476190476190478*G0_7_11 + 0.000396825396825395*G0_8_6 - 0.000793650793650796*G0_8_7 - 0.000793650793650796*G0_8_8 - 0.0015873015873016*G0_8_9 + 0.00476190476190478*G0_9_7 - 0.0015873015873016*G0_9_8 - 0.00317460317460315*G0_9_10 + 0.00158730158730158*G0_10_7 - 0.00317460317460315*G0_10_9 - 0.00634920634920632*G0_10_10 - 0.00317460317460316*G0_10_11 - 0.0015873015873016*G0_11_6 + 0.00476190476190478*G0_11_7 - 0.00317460317460316*G0_11_10;
    A[2] = -0.000793650793650796*G0_0_0 + 0.000396825396825395*G0_0_1 - 0.000793650793650795*G0_0_2 - 0.0015873015873016*G0_0_4 + 0.000396825396825395*G0_1_0 - 0.000793650793650796*G0_1_1 - 0.000793650793650796*G0_1_2 - 0.0015873015873016*G0_1_3 - 0.000793650793650795*G0_2_0 - 0.000793650793650796*G0_2_1 + 0.00714285714285722*G0_2_2 + 0.00476190476190478*G0_2_3 + 0.00476190476190478*G0_2_4 + 0.00158730158730158*G0_2_5 - 0.0015873015873016*G0_3_1 + 0.00476190476190478*G0_3_2 - 0.00317460317460315*G0_3_5 - 0.0015873015873016*G0_4_0 + 0.00476190476190478*G0_4_2 - 0.00317460317460315*G0_4_5 + 0.00158730158730158*G0_5_2 - 0.00317460317460315*G0_5_3 - 0.00317460317460316*G0_5_4 - 0.00634920634920632*G0_5_5 - 0.000793650793650796*G0_6_6 + 0.000396825396825395*G0_6_7 - 0.000793650793650795*G0_6_8 - 0.0015873015873016*G0_6_10 + 0.000396825396825395*G0_7_6 - 0.000793650793650796*G0_7_7 - 0.000793650793650796*G0_7_8 - 0.0015873015873016*G0_7_9 - 0.000793650793650795*G0_8_6 - 0.000793650793650796*G0_8_7 + 0.00714285714285722*G0_8_8 + 0.00476190476190478*G0_8_9 + 0.00476190476190478*G0_8_10 + 0.00158730158730158*G0_8_11 - 0.0015873015873016*G0_9_7 + 0.00476190476190478*G0_9_8 - 0.00317460317460315*G0_9_11 - 0.0015873015873016*G0_10_6 + 0.00476190476190478*G0_10_8 - 0.00317460317460315*G0_10_11 + 0.00158730158730158*G0_11_8 - 0.00317460317460315*G0_11_9 - 0.00317460317460316*G0_11_10 - 0.00634920634920632*G0_11_11;
    A[3] = 0.00158730158730157*G0_0_0 - 0.0063492063492063*G0_0_3 - 0.00317460317460314*G0_0_4 - 0.00317460317460314*G0_0_5 + 0.00476190476190478*G0_1_1 - 0.0015873015873016*G0_1_2 - 0.00317460317460315*G0_1_4 - 0.0015873015873016*G0_2_1 + 0.00476190476190478*G0_2_2 - 0.00317460317460315*G0_2_5 - 0.0063492063492063*G0_3_0 + 0.0571428571428575*G0_3_3 + 0.0190476190476189*G0_3_4 + 0.0190476190476189*G0_3_5 - 0.00317460317460314*G0_4_0 - 0.00317460317460315*G0_4_1 + 0.0190476190476189*G0_4_3 + 0.0190476190476189*G0_4_4 + 0.0126984126984126*G0_4_5 - 0.00317460317460314*G0_5_0 - 0.00317460317460315*G0_5_2 + 0.0190476190476189*G0_5_3 + 0.0126984126984126*G0_5_4 + 0.0190476190476189*G0_5_5 + 0.00158730158730157*G0_6_6 - 0.0063492063492063*G0_6_9 - 0.00317460317460314*G0_6_10 - 0.00317460317460314*G0_6_11 + 0.00476190476190478*G0_7_7 - 0.0015873015873016*G0_7_8 - 0.00317460317460315*G0_7_10 - 0.0015873015873016*G0_8_7 + 0.00476190476190478*G0_8_8 - 0.00317460317460315*G0_8_11 - 0.0063492063492063*G0_9_6 + 0.0571428571428575*G0_9_9 + 0.0190476190476189*G0_9_10 + 0.0190476190476189*G0_9_11 - 0.00317460317460314*G0_10_6 - 0.00317460317460315*G0_10_7 + 0.0190476190476189*G0_10_9 + 0.0190476190476189*G0_10_10 + 0.0126984126984126*G0_10_11 - 0.00317460317460314*G0_11_6 - 0.00317460317460315*G0_11_8 + 0.0190476190476189*G0_11_9 + 0.0126984126984126*G0_11_10 + 0.0190476190476189*G0_11_11;
    A[4] = 0.00476190476190478*G0_0_0 - 0.0015873015873016*G0_0_2 - 0.00317460317460314*G0_0_3 + 0.00158730158730158*G0_1_1 - 0.00317460317460315*G0_1_3 - 0.00634920634920632*G0_1_4 - 0.00317460317460316*G0_1_5 - 0.0015873015873016*G0_2_0 + 0.00476190476190478*G0_2_2 - 0.00317460317460316*G0_2_5 - 0.00317460317460314*G0_3_0 - 0.00317460317460315*G0_3_1 + 0.0190476190476189*G0_3_3 + 0.0190476190476189*G0_3_4 + 0.0126984126984126*G0_3_5 - 0.00634920634920632*G0_4_1 + 0.0190476190476189*G0_4_3 + 0.0571428571428576*G0_4_4 + 0.019047619047619*G0_4_5 - 0.00317460317460316*G0_5_1 - 0.00317460317460316*G0_5_2 + 0.0126984126984126*G0_5_3 + 0.019047619047619*G0_5_4 + 0.019047619047619*G0_5_5 + 0.00476190476190478*G0_6_6 - 0.0015873015873016*G0_6_8 - 0.00317460317460314*G0_6_9 + 0.00158730158730158*G0_7_7 - 0.00317460317460315*G0_7_9 - 0.00634920634920632*G0_7_10 - 0.00317460317460316*G0_7_11 - 0.0015873015873016*G0_8_6 + 0.00476190476190478*G0_8_8 - 0.00317460317460316*G0_8_11 - 0.00317460317460314*G0_9_6 - 0.00317460317460315*G0_9_7 + 0.0190476190476189*G0_9_9 + 0.0190476190476189*G0_9_10 + 0.0126984126984126*G0_9_11 - 0.00634920634920632*G0_10_7 + 0.0190476190476189*G0_10_9 + 0.0571428571428576*G0_10_10 + 0.019047619047619*G0_10_11 - 0.00317460317460316*G0_11_7 - 0.00317460317460316*G0_11_8 + 0.0126984126984126*G0_11_9 + 0.019047619047619*G0_11_10 + 0.019047619047619*G0_11_11;
    A[5] = 0.00476190476190478*G0_0_0 - 0.0015873015873016*G0_0_1 - 0.00317460317460314*G0_0_3 - 0.0015873015873016*G0_1_0 + 0.00476190476190478*G0_1_1 - 0.00317460317460316*G0_1_4 + 0.00158730158730158*G0_2_2 - 0.00317460317460315*G0_2_3 - 0.00317460317460316*G0_2_4 - 0.00634920634920632*G0_2_5 - 0.00317460317460314*G0_3_0 - 0.00317460317460315*G0_3_2 + 0.0190476190476189*G0_3_3 + 0.0126984126984126*G0_3_4 + 0.0190476190476189*G0_3_5 - 0.00317460317460316*G0_4_1 - 0.00317460317460316*G0_4_2 + 0.0126984126984126*G0_4_3 + 0.019047619047619*G0_4_4 + 0.019047619047619*G0_4_5 - 0.00634920634920632*G0_5_2 + 0.0190476190476189*G0_5_3 + 0.019047619047619*G0_5_4 + 0.0571428571428576*G0_5_5 + 0.00476190476190478*G0_6_6 - 0.0015873015873016*G0_6_7 - 0.00317460317460314*G0_6_9 - 0.0015873015873016*G0_7_6 + 0.00476190476190478*G0_7_7 - 0.00317460317460316*G0_7_10 + 0.00158730158730158*G0_8_8 - 0.00317460317460315*G0_8_9 - 0.00317460317460316*G0_8_10 - 0.00634920634920632*G0_8_11 - 0.00317460317460314*G0_9_6 - 0.00317460317460315*G0_9_8 + 0.0190476190476189*G0_9_9 + 0.0126984126984126*G0_9_10 + 0.0190476190476189*G0_9_11 - 0.00317460317460316*G0_10_7 - 0.00317460317460316*G0_10_8 + 0.0126984126984126*G0_10_9 + 0.019047619047619*G0_10_10 + 0.019047619047619*G0_10_11 - 0.00634920634920632*G0_11_8 + 0.0190476190476189*G0_11_9 + 0.019047619047619*G0_11_10 + 0.0571428571428576*G0_11_11;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class auxforms_form_0: public ufc::form
{
public:

  /// Constructor
  auxforms_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "59662537a2ffde4cd798e223f8568354c5309019750f8e4bfb215a4effd65f6d3fceea62119e699c1821d2463fb64d3edba0fc26ce79e39e4829751327a51ba0";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 3;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 3;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return false;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_finite_element_4();
        break;
      }
    case 1:
      {
        return new auxforms_finite_element_4();
        break;
      }
    case 2:
      {
        return new auxforms_finite_element_0();
        break;
      }
    case 3:
      {
        return new auxforms_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_dofmap_4();
        break;
      }
    case 1:
      {
        return new auxforms_dofmap_4();
        break;
      }
    case 2:
      {
        return new auxforms_dofmap_0();
        break;
      }
    case 3:
      {
        return new auxforms_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 2:
      {
        return new auxforms_exterior_facet_integral_0_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class auxforms_form_1: public ufc::form
{
public:

  /// Constructor
  auxforms_form_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_form_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "0faf5f1acea2a1fea11fa3be56924b085fb1fa50e01374e31486064dc4e3bdd5f5ffde4fd3e0cf548e1329a495681e4fce178a89ac210b1fc6e22993182c09d0";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 3;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 3;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return false;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_finite_element_0();
        break;
      }
    case 1:
      {
        return new auxforms_finite_element_4();
        break;
      }
    case 2:
      {
        return new auxforms_finite_element_0();
        break;
      }
    case 3:
      {
        return new auxforms_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_dofmap_0();
        break;
      }
    case 1:
      {
        return new auxforms_dofmap_4();
        break;
      }
    case 2:
      {
        return new auxforms_dofmap_0();
        break;
      }
    case 3:
      {
        return new auxforms_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 2:
      {
        return new auxforms_exterior_facet_integral_1_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class auxforms_form_2: public ufc::form
{
public:

  /// Constructor
  auxforms_form_2() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_form_2()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "79098b43d0256257fc3400011f87287292a11505d81667f6e2feccdd95162498c3958b489443aee6b71ef27eff7ec8b53b407b0735853faac01048316b80bb92";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 3;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 3;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return false;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_finite_element_3();
        break;
      }
    case 1:
      {
        return new auxforms_finite_element_4();
        break;
      }
    case 2:
      {
        return new auxforms_finite_element_0();
        break;
      }
    case 3:
      {
        return new auxforms_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_dofmap_3();
        break;
      }
    case 1:
      {
        return new auxforms_dofmap_4();
        break;
      }
    case 2:
      {
        return new auxforms_dofmap_0();
        break;
      }
    case 3:
      {
        return new auxforms_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 2:
      {
        return new auxforms_exterior_facet_integral_2_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class auxforms_form_3: public ufc::form
{
public:

  /// Constructor
  auxforms_form_3() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_form_3()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "6cdd88f55a70af629134db89e9be5cd91e67c9210ea31170ef4235b89933566452dd5a20c9b4f68af6fa052bc58833770a4f449508ac00418f5a3b7d2d5f8adc";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 3;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 3;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return false;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_finite_element_2();
        break;
      }
    case 1:
      {
        return new auxforms_finite_element_4();
        break;
      }
    case 2:
      {
        return new auxforms_finite_element_0();
        break;
      }
    case 3:
      {
        return new auxforms_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_dofmap_2();
        break;
      }
    case 1:
      {
        return new auxforms_dofmap_4();
        break;
      }
    case 2:
      {
        return new auxforms_dofmap_0();
        break;
      }
    case 3:
      {
        return new auxforms_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 2:
      {
        return new auxforms_exterior_facet_integral_3_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class auxforms_form_4: public ufc::form
{
public:

  /// Constructor
  auxforms_form_4() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_form_4()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "ab9a539f507a179557fc9bfe723cc6d51d1772adbf1e3087457952959ff6fbf8b80fdf2fbe75ded96c73ea802c8b03c3c06a47a804299dd9bf043114b8246066";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_finite_element_1();
        break;
      }
    case 1:
      {
        return new auxforms_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_dofmap_1();
        break;
      }
    case 1:
      {
        return new auxforms_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new auxforms_cell_integral_4_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class auxforms_form_5: public ufc::form
{
public:

  /// Constructor
  auxforms_form_5() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_form_5()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "35c8a1efb7acc139eb970308a0ea652574a8c8db233fb574eedfecabef8bff7753a9630c37d7543b164615361deb73b43a12552104a34d8b51477bd2819489b2";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_finite_element_4();
        break;
      }
    case 1:
      {
        return new auxforms_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_dofmap_4();
        break;
      }
    case 1:
      {
        return new auxforms_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new auxforms_cell_integral_5_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class auxforms_form_6: public ufc::form
{
public:

  /// Constructor
  auxforms_form_6() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~auxforms_form_6()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "440bc40b0309762e8f7307cc7ba27d2e065ffa57fcb7a51212c254280ce7437d88c3665028876d614631c687a1f16d27dae8fa46285d78ba4c00c8505491b0b9";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_finite_element_0();
        break;
      }
    case 1:
      {
        return new auxforms_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new auxforms_dofmap_0();
        break;
      }
    case 1:
      {
        return new auxforms_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new auxforms_cell_integral_6_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>

namespace auxForms
{

class CoefficientSpace_coeff: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_coeff(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_coeff(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_coeff(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_coeff(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_datum: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_datum(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_datum(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_datum(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_datum(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_u: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_u(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_u(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_uVec: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_uVec(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_uVec(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_uVec(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_uVec(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_diffP1_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_diffP1_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_diffP1_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_diffP1_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_diffP1_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_u Form_diffP1_FunctionSpace_1;

typedef CoefficientSpace_datum Form_diffP1_FunctionSpace_2;

typedef CoefficientSpace_coeff Form_diffP1_FunctionSpace_3;

class Form_diffP1: public dolfin::Form
{
public:

  // Constructor
  Form_diffP1(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_0());
  }

  // Constructor
  Form_diffP1(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& datum, const dolfin::GenericFunction& coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = u;
    this->datum = datum;
    this->coeff = coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_0());
  }

  // Constructor
  Form_diffP1(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> datum, std::shared_ptr<const dolfin::GenericFunction> coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = *u;
    this->datum = *datum;
    this->coeff = *coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_0());
  }

  // Constructor
  Form_diffP1(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_0());
  }

  // Constructor
  Form_diffP1(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& datum, const dolfin::GenericFunction& coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->datum = datum;
    this->coeff = coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_0());
  }

  // Constructor
  Form_diffP1(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> datum, std::shared_ptr<const dolfin::GenericFunction> coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    this->u = *u;
    this->datum = *datum;
    this->coeff = *coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_0());
  }

  // Destructor
  ~Form_diffP1()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "datum")
      return 1;
    else if (name == "coeff")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "datum";
    case 2:
      return "coeff";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_diffP1_FunctionSpace_0 TestSpace;
  typedef Form_diffP1_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_diffP1_FunctionSpace_2 CoefficientSpace_datum;
  typedef Form_diffP1_FunctionSpace_3 CoefficientSpace_coeff;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner datum;
  dolfin::CoefficientAssigner coeff;
};

class Form_diffP2_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_diffP2_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_diffP2_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_diffP2_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_diffP2_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_u Form_diffP2_FunctionSpace_1;

typedef CoefficientSpace_datum Form_diffP2_FunctionSpace_2;

typedef CoefficientSpace_coeff Form_diffP2_FunctionSpace_3;

class Form_diffP2: public dolfin::Form
{
public:

  // Constructor
  Form_diffP2(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_1());
  }

  // Constructor
  Form_diffP2(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& datum, const dolfin::GenericFunction& coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = u;
    this->datum = datum;
    this->coeff = coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_1());
  }

  // Constructor
  Form_diffP2(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> datum, std::shared_ptr<const dolfin::GenericFunction> coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = *u;
    this->datum = *datum;
    this->coeff = *coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_1());
  }

  // Constructor
  Form_diffP2(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_1());
  }

  // Constructor
  Form_diffP2(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& datum, const dolfin::GenericFunction& coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->datum = datum;
    this->coeff = coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_1());
  }

  // Constructor
  Form_diffP2(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> datum, std::shared_ptr<const dolfin::GenericFunction> coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    this->u = *u;
    this->datum = *datum;
    this->coeff = *coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_1());
  }

  // Destructor
  ~Form_diffP2()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "datum")
      return 1;
    else if (name == "coeff")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "datum";
    case 2:
      return "coeff";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_diffP2_FunctionSpace_0 TestSpace;
  typedef Form_diffP2_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_diffP2_FunctionSpace_2 CoefficientSpace_datum;
  typedef Form_diffP2_FunctionSpace_3 CoefficientSpace_coeff;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner datum;
  dolfin::CoefficientAssigner coeff;
};

class Form_diffP4_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_diffP4_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_3()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_diffP4_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_3()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_diffP4_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_3()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_diffP4_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_3()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_3()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_u Form_diffP4_FunctionSpace_1;

typedef CoefficientSpace_datum Form_diffP4_FunctionSpace_2;

typedef CoefficientSpace_coeff Form_diffP4_FunctionSpace_3;

class Form_diffP4: public dolfin::Form
{
public:

  // Constructor
  Form_diffP4(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_2());
  }

  // Constructor
  Form_diffP4(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& datum, const dolfin::GenericFunction& coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = u;
    this->datum = datum;
    this->coeff = coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_2());
  }

  // Constructor
  Form_diffP4(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> datum, std::shared_ptr<const dolfin::GenericFunction> coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = *u;
    this->datum = *datum;
    this->coeff = *coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_2());
  }

  // Constructor
  Form_diffP4(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_2());
  }

  // Constructor
  Form_diffP4(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& datum, const dolfin::GenericFunction& coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->datum = datum;
    this->coeff = coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_2());
  }

  // Constructor
  Form_diffP4(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> datum, std::shared_ptr<const dolfin::GenericFunction> coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    this->u = *u;
    this->datum = *datum;
    this->coeff = *coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_2());
  }

  // Destructor
  ~Form_diffP4()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "datum")
      return 1;
    else if (name == "coeff")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "datum";
    case 2:
      return "coeff";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_diffP4_FunctionSpace_0 TestSpace;
  typedef Form_diffP4_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_diffP4_FunctionSpace_2 CoefficientSpace_datum;
  typedef Form_diffP4_FunctionSpace_3 CoefficientSpace_coeff;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner datum;
  dolfin::CoefficientAssigner coeff;
};

class Form_diffP6_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_diffP6_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_diffP6_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_diffP6_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_diffP6_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_u Form_diffP6_FunctionSpace_1;

typedef CoefficientSpace_datum Form_diffP6_FunctionSpace_2;

typedef CoefficientSpace_coeff Form_diffP6_FunctionSpace_3;

class Form_diffP6: public dolfin::Form
{
public:

  // Constructor
  Form_diffP6(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_3());
  }

  // Constructor
  Form_diffP6(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& datum, const dolfin::GenericFunction& coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = u;
    this->datum = datum;
    this->coeff = coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_3());
  }

  // Constructor
  Form_diffP6(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> datum, std::shared_ptr<const dolfin::GenericFunction> coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->u = *u;
    this->datum = *datum;
    this->coeff = *coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_3());
  }

  // Constructor
  Form_diffP6(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_3());
  }

  // Constructor
  Form_diffP6(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& u, const dolfin::GenericFunction& datum, const dolfin::GenericFunction& coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->datum = datum;
    this->coeff = coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_3());
  }

  // Constructor
  Form_diffP6(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> datum, std::shared_ptr<const dolfin::GenericFunction> coeff):
    dolfin::Form(1, 3), u(*this, 0), datum(*this, 1), coeff(*this, 2)
  {
    _function_spaces[0] = V0;

    this->u = *u;
    this->datum = *datum;
    this->coeff = *coeff;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_3());
  }

  // Destructor
  ~Form_diffP6()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "datum")
      return 1;
    else if (name == "coeff")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "datum";
    case 2:
      return "coeff";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_diffP6_FunctionSpace_0 TestSpace;
  typedef Form_diffP6_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_diffP6_FunctionSpace_2 CoefficientSpace_datum;
  typedef Form_diffP6_FunctionSpace_3 CoefficientSpace_coeff;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner datum;
  dolfin::CoefficientAssigner coeff;
};

class Form_kinEnNO_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_kinEnNO_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_kinEnNO_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_kinEnNO_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_kinEnNO_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_uVec Form_kinEnNO_FunctionSpace_1;

class Form_kinEnNO: public dolfin::Form
{
public:

  // Constructor
  Form_kinEnNO(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_4());
  }

  // Constructor
  Form_kinEnNO(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->uVec = uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_4());
  }

  // Constructor
  Form_kinEnNO(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->uVec = *uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_4());
  }

  // Constructor
  Form_kinEnNO(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_4());
  }

  // Constructor
  Form_kinEnNO(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = V0;

    this->uVec = uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_4());
  }

  // Constructor
  Form_kinEnNO(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = V0;

    this->uVec = *uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_4());
  }

  // Destructor
  ~Form_kinEnNO()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uVec")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uVec";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_kinEnNO_FunctionSpace_0 TestSpace;
  typedef Form_kinEnNO_FunctionSpace_1 CoefficientSpace_uVec;

  // Coefficients
  dolfin::CoefficientAssigner uVec;
};

class Form_kinEn_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_kinEn_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_kinEn_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_kinEn_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_kinEn_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_4()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_4()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_uVec Form_kinEn_FunctionSpace_1;

class Form_kinEn: public dolfin::Form
{
public:

  // Constructor
  Form_kinEn(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_5());
  }

  // Constructor
  Form_kinEn(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->uVec = uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_5());
  }

  // Constructor
  Form_kinEn(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->uVec = *uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_5());
  }

  // Constructor
  Form_kinEn(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_5());
  }

  // Constructor
  Form_kinEn(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = V0;

    this->uVec = uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_5());
  }

  // Constructor
  Form_kinEn(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = V0;

    this->uVec = *uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_5());
  }

  // Destructor
  ~Form_kinEn()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uVec")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uVec";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_kinEn_FunctionSpace_0 TestSpace;
  typedef Form_kinEn_FunctionSpace_1 CoefficientSpace_uVec;

  // Coefficients
  dolfin::CoefficientAssigner uVec;
};

class Form_kinEn2_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_kinEn2_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_kinEn2_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_kinEn2_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_kinEn2_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new auxforms_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new auxforms_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_uVec Form_kinEn2_FunctionSpace_1;

class Form_kinEn2: public dolfin::Form
{
public:

  // Constructor
  Form_kinEn2(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_6());
  }

  // Constructor
  Form_kinEn2(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->uVec = uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_6());
  }

  // Constructor
  Form_kinEn2(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->uVec = *uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_6());
  }

  // Constructor
  Form_kinEn2(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_6());
  }

  // Constructor
  Form_kinEn2(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = V0;

    this->uVec = uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_6());
  }

  // Constructor
  Form_kinEn2(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> uVec):
    dolfin::Form(1, 1), uVec(*this, 0)
  {
    _function_spaces[0] = V0;

    this->uVec = *uVec;

    _ufc_form = std::shared_ptr<const ufc::form>(new auxforms_form_6());
  }

  // Destructor
  ~Form_kinEn2()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uVec")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uVec";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_kinEn2_FunctionSpace_0 TestSpace;
  typedef Form_kinEn2_FunctionSpace_1 CoefficientSpace_uVec;

  // Coefficients
  dolfin::CoefficientAssigner uVec;
};


}

#endif
