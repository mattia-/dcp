#/* 
# *  Copyright (C) 2014, Ivan Fumagalli, ivan.fumagalli@polimi.it
# * 
# *  This file is part of the DCP library
# *   
# *   The DCP library is free software: you can redistribute it and/or modify
# *   it under the terms of the GNU General Public License as published by
# *   the Free Software Foundation, either version 3 of the License, or
# *   (at your option) any later version.
# *
# *   The DCP library is distributed in the hope that it will be useful,
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *   GNU General Public License for more details.
# *
# *   You should have received a copy of the GNU General Public License
# *   along with the DCP library.  If not, see <http://www.gnu.org/licenses/>. 
# */ 

# UFL file for elasticity problem simulation
#
# define mesh dimension
cell = triangle

# define function spaces
V = VectorElement ("Lagrange", cell, 2)

# define test and trial functions
u = TrialFunction (V)
v = TestFunction (V)
n = FacetNormal (cell)
h = MaxFacetEdgeLength (cell)
penalty = Constant (cell)
datum = Coefficient (V)
stiffnessVec = Coefficient (V)
dummy,stiffness = split (stiffnessVec)
volMin = Constant (cell)
volMax = Constant (cell)
vol = CellVolume (cell)
t_partialOmega = Coefficient(V)

# define coefficients
zero = Coefficient(V)

# define bilinear form
a = 1.0/vol * inner ( div(u), div(v) ) * dx \
    + 1.0/vol * inner ( grad(u)+nabla_grad(u), grad(v) ) * dx \
    + penalty/h * inner ( dot(outer(n,n),u), dot(outer(n,n),v) )  * ds(1) \
    - 1.0/vol * inner ( dot(outer(n,n),dot(grad(u)+nabla_grad(u),n)), dot(outer(n,n),v) )  * ds(1) \
    + 1.0/vol * inner ( dot(outer(n,n),u), dot(outer(n,n),dot(grad(v)+nabla_grad(v),n))) * ds(1) 

# define linear form 
L = inner(zero,v) * dx \
    + penalty/h * inner ( dot(outer(n,n),datum), dot(outer(n,n),v) )  * ds(1) \
    + 1.0/vol * inner ( dot(outer(n,n),datum), dot(outer(n,n),dot(grad(v)+nabla_grad(v),n))) * ds(1) 
