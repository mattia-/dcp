# define mesh dimension
cell = triangle

# define function spaces
#V = FiniteElement ("Lagrange", cell, 2)
V = VectorElement ("Lagrange", cell, 2)
Q = FiniteElement ("Lagrange", cell, 1)
T = V * Q
W = VectorElement ("Lagrange", cell, 1)
Vf = VectorElement ("Lagrange", cell, 2)
S = FiniteElement ("Lagrange", cell, 2)

# define test and trial functions
#v = TestFunction (V)
vq = TestFunction (T)
v, q = split (vq)
s = TestFunction (S)

x = SpatialCoordinate (cell)
n = FacetNormal(cell)
h_dx = Circumradius(cell)
Id = Identity(2)

nu = Constant (cell)
dt = Constant (cell)
f = Coefficient (Vf)
beta = Constant (cell)
wallVelocity = Coefficient (Vf)
gamma = Constant (cell)
stabPress = Constant (cell)

w = Coefficient (W)
#u = Coefficient (V)
#u_old = Coefficient (V)
sol = Coefficient (T)
u,p = split (sol)
sol_old = Coefficient (T)
u_old,p_old = split (sol_old)

uDir = Coefficient (V)
#wDir = Coefficient (V)

kinEn = 0.5 / dt * inner (u, u) * x[0] * dx(None, degree=5)

viscPow = 2.0 * nu * inner (sym (grad (u)), sym (grad (u))) * x[0] * dx(None, degree=5)
#viscPow = nu * inner (grad(u), grad(u)) * dx(None, degree=5)

discr = 0.5 / dt * inner (u - u_old, u - u_old) * x[0] * dx(None, degree=5)
#discrDiv = 0.5 * inner (u - u_old, u - u_old) * div(w/dt) * dx(None, degree=5)
  # w is the displacement, in this code
discrDiv = 0.5 * inner (u - u_old, u - u_old) * (Dx(x[0]*w[0],0) + x[0]*Dx(w[1],1)) / dt * dx(None, degree=5)
  # w is the displacement, in this code

bdTerm = 0.5 * inner (u, u) * inner (u_old - w/dt, n) * x[0] * ds(None, degree=5)
  # w is the displacement, in this code

#grav = inner (f[1], u) * dx(None, degree=5)
grav = inner (f, u) * x[0] * dx(None, degree=5)
enPot = 1.0 / dt * inner (x, -f) * x[0] * dx(None, degree=5)

nbc = beta * inner (u - wallVelocity, u) * x[0] * ds(3, degree=5)

sigmaLength = gamma / dt * x[0] * ds(1, degree=5)

#last one
tgDivSol = gamma * (Dx(x[0]*(u[0]),0) + x[0]*Dx(u[1],1)) * ds(1, degree=5) \
          - gamma * inner (grad(u), outer(n, n)) * x[0] * ds(1, degree=5)

bdGravu = inner (f, x) * inner (u, n) * x[0] * ds(None, degree=5)

inflow = - 0.5 * inner (u,u) * inner (u,n) * x[0] * ds(2, degree=5)

supg = stabPress * h_dx*h_dx * inner (grad(p), grad(p)) * dx(None, degree=5)
  # NB: "*x[0]" here is neglected

######## both on new and old domain

bdGravw = inner (f, x) * inner (w/dt, n) * x[0] * ds(None, degree=5)
  # w is the displacement, in this code

epsg = 0.5 * dt * inner (-f, n) * inner (w/dt, w/dt) * x[0] * ds(None, degree=5)
  # w is the displacement, in this code

######## on old domain

divEpsGamma = gamma * (Dx(x[0]*w[0]/dt,0) + x[0]*Dx(w[1]/dt,1)) * ds(1, degree=5) \
              - gamma * inner (grad(w/dt), outer(n, n)) * x[0] * ds(1, degree=5)

divEpsGammaErr = gamma * (Dx(x[0]*(w[0]/dt-u[0]),0) + x[0]*Dx(w[1]/dt-u[1],1)) * ds(1, degree=5) \
                - gamma * inner (grad(w/dt-u), outer(n, n)) * x[0] * ds(1, degree=5)

######## GCL
intGCL = s * x[0] * dx(None, degree=5)
#divGCL = div(w) * s * dx(None, degree=5)
divGCL = (Dx(x[0]*w[0],0) + x[0]*Dx(w[1],1)) * s * dx(None, degree=5)
  # w is the displacement, in this code

forms = [kinEn, viscPow, discr, discrDiv, bdTerm, grav, enPot, nbc, sigmaLength, epsg, bdGravu, bdGravw, divEpsGamma, divEpsGammaErr, tgDivSol, intGCL, divGCL, inflow, supg]
