#/* 
# *  Copyright (C) 2015, Ivan Fumagalli, ivan.fumagalli@polimi.it
# * 
# *  This file is part of the DCP library
# *   
# *   The DCP library is free software: you can redistribute it and/or modify
# *   it under the terms of the GNU General Public License as published by
# *   the Free Software Foundation, either version 3 of the License, or
# *   (at your option) any later version.
# *
# *   The DCP library is distributed in the hope that it will be useful,
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *   GNU General Public License for more details.
# *
# *   You should have received a copy of the GNU General Public License
# *   along with the DCP library.  If not, see <http://www.gnu.org/licenses/>. 
# */ 

# UFL file for time dependent, moving domain (ALE) Navier-Stokes simulation
# Terms to be integrated on the previous-than-current domain
# lambdastar is the weight: lambdastar*int_curr+(1-lambdastar)*int_prev
#
# define mesh dimension
cell = triangle

# define function spaces
V = VectorElement ("Lagrange", cell, 1)
Q = FiniteElement ("Lagrange", cell, 1)
T = V * Q
W = VectorElement ("Lagrange", cell, 1)

# define test and trial functions
trial = TrialFunction (T)
test = TestFunction (T)

u, p = split (trial)
v, q = split (test)

x = SpatialCoordinate (cell)

# define coefficients
nu = Constant (cell)
gamma = Constant (cell)
dt = Constant (cell)
lambdastar = Constant (cell)
noStokes = Constant (cell)
stabBulk = Constant (cell)
stabSigma = Constant (cell)
n = FacetNormal(cell)
h = MaxFacetEdgeLength(cell)
h_dx = Circumradius(cell)
u_old = Coefficient (V)
uDir = Coefficient (V)
#w = Coefficient(V)
w = Coefficient(W)
beta = Constant (cell)
stressAbove = Coefficient (V)
dummy, normalStressAbove = split (stressAbove)
stressBelow = Coefficient (V)
gravityVector = VectorConstant (cell)
wallVelocity = Coefficient (V)

stabPress = Constant (cell)

rescale = Constant (cell)

#wr,wth = split (w)
#ur,uth = split (u)
#vr,vth = split (v)
#ur_old,uth_old = split (u_old)

#th = pi/2
#A = as_matrix([[cos(th) , -sin(th)] , [sin(th) , cos(th)]])
#A = as_matrix ([ [0 , -1] , [1 , 0] ])

# define bilinear form
a = inner (u, v) * dx \
    + dt * 2.0 * nu * inner (sym (grad (u)), sym (grad (v))) * dx \
    + noStokes * dt * inner (grad (u) * (u_old+uDir), v) * dx \
    - inner (grad (u) * w, v) * dx \
    - div (w) * inner (u, v) * dx \
    - dt * inner (p, div (v)) * dx \
    + dt * inner (div(u), q) * dx \
    + dt * beta * inner (u, v) * ds(3) \
    + stabBulk * dt * 0.5 * div (u_old) * inner (u, v) * dx \
    + stabBulk * dt * 0.5 * div (uDir) * inner (u, v) * dx \
    - stabSigma * 0.5 * dot (dt*u_old+dt*uDir-w, n) * inner (u, v) * ds(1) \
    + dt * stabPress * h_dx*h_dx * inner (grad (p), grad (q)) * dx
    #+ dt * stabPress * inner (grad (p), grad (q)) * dx
#-outer NON SI PUO'    + gamma * dt * tr ((Identity-outer(n,n)) * grad(v))  * ds(1)

# define linear form
L = lambdastar * dt * inner(gravityVector, v) * dx \
    - rescale * dt * gamma * div (v) * ds(1) \
    + dt * gamma * inner (grad(v), outer (n,n)) * ds(1) \
    + dt * beta * inner (wallVelocity, v) * ds(3) \
    + lambdastar * dt * inner (normalStressAbove*n, v) * ds(1) \
    + lambdastar * dt * inner (stressBelow, v) * ds(2) \
    - inner (uDir, v) * dx \
    - stabBulk * dt * inner (grad (uDir) * (u_old+uDir), v) * dx \
    + inner (grad (uDir) * w, v) * dx \
    + div (w) * inner (uDir, v) * dx \
    + dt * 2.0 * nu * inner (sym (grad (uDir)), sym (grad (v))) * dx \
    - dt * inner (div (uDir), q) * dx \
    + dt * stabPress * h_dx*h_dx * inner (grad(q), gravityVector) * dx
